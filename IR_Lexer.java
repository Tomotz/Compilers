/* The following code was generated by JFlex 1.4.3 on 1/26/16 9:09 PM */

 /***************************/
/* FILE NAME: LEX_FILE.lex */
/***************************/

/***************************/
/* AUTHOR: OREN ISH SHALOM */
/***************************/

/*************/
/* USER CODE */ 
/*************/
   
import java_cup.runtime.*;

/******************************/
/* DOLAR DOLAR - DON'T TOUCH! */
/******************************/
      

class IR_Lexer implements java_cup.runtime.Scanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\3\1\2\1\0\1\3\1\1\22\0\1\12\1\12\1\7"+
    "\1\5\4\12\1\57\1\60\2\12\1\56\1\12\1\61\13\12\1\63"+
    "\2\12\1\62\3\12\1\21\1\12\1\45\1\37\1\53\1\25\1\52"+
    "\1\12\1\40\1\47\1\12\1\31\1\15\1\42\1\43\2\12\1\55"+
    "\1\34\1\50\1\12\1\54\1\12\1\44\2\12\1\13\1\6\1\14"+
    "\1\12\1\64\1\12\1\23\1\36\1\41\1\30\1\20\1\12\1\32"+
    "\1\33\1\26\2\12\1\27\1\46\1\11\1\16\1\4\1\12\1\22"+
    "\1\51\1\10\1\35\1\17\2\12\1\24\5\12\uff81\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\2\2\2\3\2\1\1\4\1\5\15\3"+
    "\1\6\1\7\1\10\1\11\1\12\1\13\1\14\1\0"+
    "\4\15\2\0\1\16\15\3\1\17\6\3\1\20\1\21"+
    "\1\22\1\3\1\23\2\3\1\24\1\25\1\26\1\27"+
    "\1\30\1\31\1\32\4\3\1\33\4\3\1\34\11\3"+
    "\1\35\1\3\1\36\11\3\1\37\1\3\1\40\1\3"+
    "\1\41\3\3\1\42\1\3\1\43\10\3\1\44\1\3"+
    "\1\45\1\46\2\3\1\47\2\3\1\50\1\3\1\51"+
    "\1\52";

  private static int [] zzUnpackAction() {
    int [] result = new int[135];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\65\0\152\0\65\0\237\0\324\0\u0109\0\u013e"+
    "\0\237\0\237\0\u0173\0\u01a8\0\u01dd\0\u0212\0\u0247\0\u027c"+
    "\0\u02b1\0\u02e6\0\u031b\0\u0350\0\u0385\0\u03ba\0\u03ef\0\237"+
    "\0\237\0\237\0\237\0\237\0\237\0\237\0\u0109\0\u0424"+
    "\0\u0459\0\65\0\u048e\0\u013e\0\u04c3\0\65\0\u04f8\0\u052d"+
    "\0\u0562\0\u0597\0\u05cc\0\u0601\0\u0636\0\u066b\0\u06a0\0\u06d5"+
    "\0\u070a\0\u073f\0\u0774\0\237\0\u07a9\0\u07de\0\u0813\0\u0848"+
    "\0\u087d\0\u08b2\0\237\0\237\0\237\0\u08e7\0\237\0\u091c"+
    "\0\u0951\0\237\0\237\0\237\0\237\0\237\0\237\0\237"+
    "\0\u0986\0\u09bb\0\u09f0\0\u0a25\0\u0a5a\0\u0a8f\0\u0ac4\0\u0af9"+
    "\0\u0b2e\0\u0b63\0\u0b98\0\u0bcd\0\u0c02\0\u0c37\0\u0c6c\0\u0ca1"+
    "\0\u0cd6\0\u0d0b\0\u0d40\0\u0d75\0\u0daa\0\u0ddf\0\u0e14\0\u0e49"+
    "\0\u0e7e\0\u0eb3\0\u0ee8\0\u0f1d\0\u0f52\0\u0f87\0\u0fbc\0\237"+
    "\0\u0ff1\0\237\0\u1026\0\237\0\u105b\0\u1090\0\u10c5\0\237"+
    "\0\u10fa\0\237\0\u112f\0\u1164\0\u1199\0\u11ce\0\u1203\0\u1238"+
    "\0\u126d\0\u12a2\0\237\0\u12d7\0\237\0\237\0\u130c\0\u1341"+
    "\0\237\0\u1376\0\u13ab\0\237\0\u13e0\0\237\0\237";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[135];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\2\4\1\5\1\6\1\7\1\10\3\5"+
    "\1\11\1\12\1\13\3\5\1\14\7\5\1\15\2\5"+
    "\1\16\2\5\1\17\1\20\1\5\1\21\1\22\1\23"+
    "\1\24\1\5\1\25\4\5\1\26\1\27\1\30\1\31"+
    "\1\32\1\33\1\34\1\35\1\36\67\0\1\4\66\0"+
    "\2\5\1\37\1\0\55\5\1\40\1\41\1\42\1\40"+
    "\2\6\1\43\1\40\55\6\6\0\4\5\57\0\2\44"+
    "\1\45\1\46\55\44\4\0\2\5\1\37\1\0\6\5"+
    "\1\47\16\5\1\50\27\5\4\0\2\5\1\37\1\0"+
    "\1\5\1\51\10\5\1\52\5\5\1\53\34\5\4\0"+
    "\2\5\1\37\1\0\16\5\1\54\36\5\4\0\2\5"+
    "\1\37\1\0\1\55\24\5\1\56\27\5\4\0\2\5"+
    "\1\37\1\0\10\5\1\57\5\5\1\60\36\5\4\0"+
    "\2\5\1\37\1\0\1\5\1\61\53\5\4\0\2\5"+
    "\1\37\1\0\6\5\1\62\1\5\1\63\44\5\4\0"+
    "\2\5\1\37\1\0\12\5\1\64\42\5\4\0\2\5"+
    "\1\37\1\0\6\5\1\65\46\5\4\0\2\5\1\37"+
    "\1\0\6\5\1\66\46\5\4\0\2\5\1\37\1\0"+
    "\25\5\1\67\27\5\4\0\2\5\1\37\1\0\16\5"+
    "\1\70\36\5\4\0\2\5\1\37\1\0\10\5\1\71"+
    "\44\5\1\40\1\41\1\42\62\40\2\0\1\42\62\0"+
    "\1\40\1\41\1\42\3\40\4\6\53\40\6\0\4\44"+
    "\57\0\2\5\1\37\1\0\7\5\1\72\10\5\1\73"+
    "\34\5\4\0\2\5\1\37\1\0\17\5\1\74\35\5"+
    "\4\0\2\5\1\37\1\0\20\5\1\75\34\5\4\0"+
    "\2\5\1\37\1\0\12\5\1\76\42\5\4\0\2\5"+
    "\1\37\1\0\20\5\1\77\34\5\4\0\2\5\1\37"+
    "\1\0\26\5\1\100\26\5\4\0\2\5\1\37\1\0"+
    "\13\5\1\101\41\5\4\0\2\5\1\37\1\0\26\5"+
    "\1\102\26\5\4\0\2\5\1\37\1\0\31\5\1\103"+
    "\23\5\4\0\2\5\1\37\1\0\7\5\1\104\45\5"+
    "\4\0\2\5\1\37\1\0\31\5\1\105\23\5\4\0"+
    "\2\5\1\37\1\0\1\106\54\5\4\0\2\5\1\37"+
    "\1\0\22\5\1\107\32\5\4\0\2\5\1\37\1\0"+
    "\12\5\1\110\42\5\4\0\2\5\1\37\1\0\36\5"+
    "\1\111\16\5\4\0\2\5\1\37\1\0\36\5\1\112"+
    "\16\5\4\0\2\5\1\37\1\0\12\5\1\113\42\5"+
    "\4\0\2\5\1\37\1\0\1\114\54\5\4\0\2\5"+
    "\1\37\1\0\10\5\1\115\44\5\4\0\2\5\1\37"+
    "\1\0\13\5\1\116\41\5\4\0\2\5\1\37\1\0"+
    "\12\5\1\117\42\5\4\0\2\5\1\37\1\0\1\120"+
    "\54\5\4\0\1\121\1\5\1\37\1\0\55\5\4\0"+
    "\1\122\1\5\1\37\1\0\55\5\4\0\2\5\1\37"+
    "\1\0\1\123\54\5\4\0\2\5\1\37\1\0\25\5"+
    "\1\124\27\5\4\0\2\5\1\37\1\0\11\5\1\125"+
    "\3\5\1\126\37\5\4\0\2\5\1\37\1\0\14\5"+
    "\1\127\40\5\4\0\2\5\1\37\1\0\13\5\1\130"+
    "\41\5\4\0\2\5\1\37\1\0\16\5\1\131\36\5"+
    "\4\0\2\5\1\37\1\0\13\5\1\132\41\5\4\0"+
    "\2\5\1\37\1\0\15\5\1\133\3\5\1\134\16\5"+
    "\1\135\1\5\1\136\12\5\4\0\2\5\1\37\1\0"+
    "\25\5\1\137\27\5\4\0\2\5\1\37\1\0\12\5"+
    "\1\140\42\5\4\0\2\5\1\37\1\0\12\5\1\141"+
    "\42\5\4\0\2\5\1\37\1\0\16\5\1\142\36\5"+
    "\4\0\2\5\1\37\1\0\21\5\1\143\33\5\4\0"+
    "\2\5\1\37\1\0\12\5\1\144\42\5\4\0\2\5"+
    "\1\37\1\0\31\5\1\145\23\5\4\0\2\5\1\37"+
    "\1\0\12\5\1\146\42\5\4\0\2\5\1\37\1\0"+
    "\13\5\1\147\41\5\4\0\2\5\1\37\1\0\43\5"+
    "\1\150\11\5\4\0\2\5\1\37\1\0\12\5\1\151"+
    "\42\5\4\0\2\5\1\37\1\0\43\5\1\152\11\5"+
    "\4\0\2\5\1\37\1\0\13\5\1\153\41\5\4\0"+
    "\2\5\1\37\1\0\1\5\1\154\53\5\4\0\2\5"+
    "\1\37\1\0\12\5\1\155\42\5\4\0\2\5\1\37"+
    "\1\0\10\5\1\156\44\5\4\0\2\5\1\37\1\0"+
    "\10\5\1\157\44\5\4\0\2\5\1\37\1\0\14\5"+
    "\1\160\40\5\4\0\2\5\1\37\1\0\35\5\1\161"+
    "\17\5\4\0\2\5\1\37\1\0\10\5\1\162\44\5"+
    "\4\0\2\5\1\37\1\0\17\5\1\163\35\5\4\0"+
    "\2\5\1\37\1\0\25\5\1\164\27\5\4\0\2\5"+
    "\1\37\1\0\17\5\1\165\35\5\4\0\2\5\1\37"+
    "\1\0\13\5\1\166\41\5\4\0\2\5\1\37\1\0"+
    "\17\5\1\167\35\5\4\0\2\5\1\37\1\0\1\5"+
    "\1\170\53\5\4\0\2\5\1\37\1\0\13\5\1\171"+
    "\41\5\4\0\2\5\1\37\1\0\41\5\1\172\13\5"+
    "\4\0\2\5\1\37\1\0\10\5\1\173\44\5\4\0"+
    "\2\5\1\37\1\0\35\5\1\174\17\5\4\0\2\5"+
    "\1\37\1\0\14\5\1\175\40\5\4\0\2\5\1\37"+
    "\1\0\20\5\1\176\34\5\4\0\2\5\1\37\1\0"+
    "\22\5\1\177\32\5\4\0\2\5\1\37\1\0\17\5"+
    "\1\200\35\5\4\0\2\5\1\37\1\0\10\5\1\201"+
    "\44\5\4\0\2\5\1\37\1\0\13\5\1\202\41\5"+
    "\4\0\2\5\1\37\1\0\1\203\54\5\4\0\2\5"+
    "\1\37\1\0\17\5\1\204\35\5\4\0\2\5\1\37"+
    "\1\0\17\5\1\205\35\5\4\0\2\5\1\37\1\0"+
    "\23\5\1\206\31\5\4\0\2\5\1\37\1\0\17\5"+
    "\1\207\35\5";

  private static int [] zzUnpackTrans() {
    int [] result = new int[5141];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\1\1\1\11\32\1\1\0\2\1\1\11"+
    "\1\1\2\0\1\11\141\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[135];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
public void printLineNumber(){
	System.out.pr3intln();
	System.out.print(yyline+1);
	System.out.print(": "); 
}  

public int getLineNumber(){
	return yyline+1;
} 

private Token printToken(String token_name, int token_sym) {
	/*printLineNumber(); 
	System.out.print(token_name); */
	return symbol(token_sym, token_name);
}

private Token printToken(String token_name, int token_sym, Object value) {
	/*printLineNumber(); 
	System.out.print(token_name); */
	return symbol(token_sym, token_name, value);
}
    
 
/*************************************************************************

********/
    /* Create a new java_cup.runtime.Symbol with information about the 

current token */
    

/*************************************************************************

********/
    private Token symbol(int type, String token_name)               
   		{return new Token(type, yyline, yycolumn, token_name);}
    private Token symbol(int type, String token_name, Object value) 
    	{return new Token(type, yyline, yycolumn, token_name, value);}


  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  IR_Lexer(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  IR_Lexer(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 156) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzCurrentPos*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = zzReader.read(zzBuffer, zzEndRead,
                                            zzBuffer.length-zzEndRead);

    if (numRead > 0) {
      zzEndRead+= numRead;
      return false;
    }
    // unlikely but not impossible: read 0 characters, but not at end of stream    
    if (numRead == 0) {
      int c = zzReader.read();
      if (c == -1) {
        return true;
      } else {
        zzBuffer[zzEndRead++] = (char) c;
        return false;
      }     
    }

	// numRead < 0
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      for (zzCurrentPosL = zzStartRead; zzCurrentPosL < zzMarkedPosL;
                                                             zzCurrentPosL++) {
        switch (zzBufferL[zzCurrentPosL]) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn++;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 13: 
          { /* skip */
          }
        case 43: break;
        case 41: 
          { return printToken("ArrayLength" , sym.ARRAYLENGTH);
          }
        case 44: break;
        case 29: 
          { return printToken("JumpL", sym.JUMPL);
          }
        case 45: break;
        case 5: 
          { return printToken("RB",sym.RB);
          }
        case 46: break;
        case 40: 
          { return printToken("StaticCall", sym.STATICCALL);
          }
        case 47: break;
        case 12: 
          { return printToken("UNDERSCORE", sym.UNDERSCORE )
          }
        case 48: break;
        case 31: 
          { return printToken("JumpLE", sym.JUMPLE);
          }
        case 49: break;
        case 32: 
          { return printToken("JumpGE", sym.JUMPGE);
          }
        case 50: break;
        case 28: 
          { return printToken("Jump", sym.JUMP);
          }
        case 51: break;
        case 33: 
          { return printToken("Return", sym.RETURN);
          }
        case 52: break;
        case 2: 
          { /* just skip what was found, do nothing */
          }
        case 53: break;
        case 36: 
          { return printToken("JumpTrue", sym.JUMPTRUE);
          }
        case 54: break;
        case 1: 
          { throw new RuntimeException("Error: Invalid token: "+new String(yytext())+" at line " +Integer.toString(yyline+1));
          }
        case 55: break;
        case 42: 
          { return printToken("VirtualCall", sym.VIRTUALCALL);
          }
        case 56: break;
        case 21: 
          { return printToken("Dec" , sym.DEC);
          }
        case 57: break;
        case 9: 
          { return printToken("DOT",sym.DOT);
          }
        case 58: break;
        case 19: 
          { return printToken("Add", sym.ADD);
          }
        case 59: break;
        case 27: 
          { return printToken("Move",sym.MOVE);
          }
        case 60: break;
        case 4: 
          { return printToken("LB",sym.LB);
          }
        case 61: break;
        case 17: 
          { return printToken("Mul", sym.MUL);
          }
        case 62: break;
        case 30: 
          { return printToken("JumpG", sym.JUMPG);
          }
        case 63: break;
        case 35: 
          { return printToken("Compare", sym.COMPARE);
          }
        case 64: break;
        case 11: 
          { return printToken("COLON", sym.COLON)
          }
        case 65: break;
        case 37: 
          { return printToken("MoveArray",sym.MOVEARRAY);
          }
        case 66: break;
        case 22: 
          { return printToken("Div", sym.DIV);
          }
        case 67: break;
        case 8: 
          { return printToken("RP",sym.RP);
          }
        case 68: break;
        case 24: 
          { return printToken("Not", sym.NOT);
          }
        case 69: break;
        case 20: 
          { return printToken("Sub", sym.SUB);
          }
        case 70: break;
        case 25: 
          { return printToken("Neg", sym.NEG);
          }
        case 71: break;
        case 39: 
          { return printToken("JumpFalse", sym.JUMPFALSE);
          }
        case 72: break;
        case 18: 
          { return printToken("And", sym.AND);
          }
        case 73: break;
        case 34: 
          { return printToken("Library", sym.LIBRARY);
          }
        case 74: break;
        case 15: 
          { return printToken("Or", sym.OR);
          }
        case 75: break;
        case 26: 
          { return printToken("Xor", sym.XOR);
          }
        case 76: break;
        case 10: 
          { return printToken("ASSIGN", sym.ASSIGN);
          }
        case 77: break;
        case 14: 
          { return printToken("QUOTE(" + new String(yytext()) + ")", 
							sym.QUOTE, new String(yytext()));
          }
        case 78: break;
        case 38: 
          { return printToken("MoveField", sym.MOVEFIELD);
          }
        case 79: break;
        case 23: 
          { return printToken("Inc", sym.INC);
          }
        case 80: break;
        case 3: 
          { return printToken(new String(yytext()),sym.WORD)
          }
        case 81: break;
        case 7: 
          { return printToken("LP",sym.LP);
          }
        case 82: break;
        case 16: 
          { return printToken("Mod", sym.MOD);
          }
        case 83: break;
        case 6: 
          { return printToken("COMMA",sym.COMMA);
          }
        case 84: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            zzDoEOF();
            switch (zzLexicalState) {
            case YYINITIAL: {
              return printToken("EOF", sym.EOF, new String(yytext()));
            }
            case 136: break;
            default:
              { return new java_cup.runtime.Symbol(sym.EOF); }
            }
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
