
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Fri Dec 18 17:35:00 IST 2015
//----------------------------------------------------

package slp;

import java_cup.runtime.*;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Fri Dec 18 17:35:00 IST 2015
  */
public class SlpCup extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public SlpCup() {super();}

  /** Constructor which sets the default scanner. */
  public SlpCup(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public SlpCup(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\123\000\002\015\003\000\002\002\004\000\002\010" +
    "\004\000\002\010\002\000\002\007\010\000\002\012\002" +
    "\000\002\012\004\000\002\016\003\000\002\016\004\000" +
    "\002\017\003\000\002\017\003\000\002\020\005\000\002" +
    "\006\002\000\002\006\005\000\002\011\011\000\002\013" +
    "\005\000\002\013\004\000\002\013\005\000\002\013\004" +
    "\000\002\005\003\000\002\005\003\000\002\005\003\000" +
    "\002\005\003\000\002\005\005\000\002\021\002\000\002" +
    "\021\003\000\002\014\004\000\002\014\006\000\002\004" +
    "\002\000\002\004\004\000\002\003\006\000\002\003\004" +
    "\000\002\003\005\000\002\003\010\000\002\003\007\000" +
    "\002\003\004\000\002\003\004\000\002\003\005\000\002" +
    "\003\006\000\002\032\002\000\002\032\004\000\002\033" +
    "\002\000\002\033\004\000\002\002\003\000\002\002\003" +
    "\000\002\002\003\000\002\002\006\000\002\002\007\000" +
    "\002\002\005\000\002\002\005\000\002\002\004\000\002" +
    "\002\003\000\002\002\005\000\002\022\003\000\002\022" +
    "\003\000\002\023\010\000\002\024\003\000\002\024\004" +
    "\000\002\025\010\000\002\025\006\000\002\026\003\000" +
    "\002\026\005\000\002\026\006\000\002\027\003\000\002" +
    "\027\003\000\002\027\003\000\002\027\003\000\002\027" +
    "\003\000\002\027\003\000\002\027\003\000\002\027\003" +
    "\000\002\027\003\000\002\027\003\000\002\027\003\000" +
    "\002\027\003\000\002\027\003\000\002\030\003\000\002" +
    "\030\003\000\002\031\003\000\002\031\003\000\002\031" +
    "\003\000\002\031\003\000\002\031\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\223\000\006\002\ufffe\062\ufffe\001\002\000\006\002" +
    "\001\062\010\001\002\000\004\002\006\001\002\000\004" +
    "\002\000\001\002\000\006\002\uffff\062\uffff\001\002\000" +
    "\004\016\011\001\002\000\006\055\ufffc\056\012\001\002" +
    "\000\004\016\225\001\002\000\004\055\014\001\002\000" +
    "\016\016\025\021\016\024\017\047\022\050\021\054\024" +
    "\001\002\000\020\016\ufff7\021\ufff7\024\ufff7\042\ufff7\047" +
    "\ufff7\050\ufff7\054\ufff7\001\002\000\012\010\uffee\017\uffee" +
    "\027\uffee\041\uffee\001\002\000\014\016\025\021\016\047" +
    "\222\050\021\054\024\001\002\000\004\037\043\001\002" +
    "\000\012\010\uffed\017\uffed\027\uffed\041\uffed\001\002\000" +
    "\004\017\042\001\002\000\020\016\025\021\016\024\017" +
    "\042\040\047\022\050\021\054\024\001\002\000\012\010" +
    "\uffec\017\uffec\027\uffec\041\uffec\001\002\000\012\010\uffeb" +
    "\017\uffeb\027\uffeb\041\uffeb\001\002\000\012\010\ufff5\017" +
    "\031\027\033\041\ufff5\001\002\000\020\016\ufff8\021\ufff8" +
    "\024\ufff8\042\ufff8\047\ufff8\050\ufff8\054\ufff8\001\002\000" +
    "\020\016\ufffa\021\ufffa\024\ufffa\042\ufffa\047\ufffa\050\ufffa" +
    "\054\ufffa\001\002\000\004\037\ufff1\001\002\000\006\010" +
    "\036\041\035\001\002\000\004\045\034\001\002\000\012" +
    "\010\uffea\017\uffea\027\uffea\041\uffea\001\002\000\004\017" +
    "\037\001\002\000\020\016\ufff6\021\ufff6\024\ufff6\042\ufff6" +
    "\047\ufff6\050\ufff6\054\ufff6\001\002\000\006\010\ufff4\041" +
    "\ufff4\001\002\000\006\002\ufffd\062\ufffd\001\002\000\020" +
    "\016\ufff9\021\ufff9\024\ufff9\042\ufff9\047\ufff9\050\ufff9\054" +
    "\ufff9\001\002\000\004\037\uffef\001\002\000\014\016\025" +
    "\021\016\050\021\054\024\057\uffe9\001\002\000\006\017" +
    "\216\027\033\001\002\000\004\057\uffe8\001\002\000\004" +
    "\057\047\001\002\000\004\055\050\001\002\000\060\005" +
    "\uffe5\016\uffe5\017\uffe5\020\uffe5\021\uffe5\023\uffe5\025\uffe5" +
    "\026\uffe5\034\uffe5\035\uffe5\036\uffe5\037\uffe5\040\uffe5\042" +
    "\uffe5\043\uffe5\046\uffe5\050\uffe5\052\uffe5\054\uffe5\055\uffe5" +
    "\060\uffe5\061\uffe5\062\uffe5\001\002\000\060\005\076\016" +
    "\025\017\067\020\072\021\016\023\060\025\101\026\053" +
    "\034\066\035\064\036\071\037\057\040\062\042\105\043" +
    "\103\046\075\050\021\052\070\054\024\055\055\060\100" +
    "\061\073\062\054\001\002\000\042\004\uffd6\005\uffd6\006" +
    "\uffd6\007\uffd6\011\213\012\uffd6\013\uffd6\014\uffd6\015\uffd6" +
    "\022\uffd6\027\uffd6\030\uffd6\031\uffd6\032\uffd6\033\uffd6\053" +
    "\uffd6\001\002\000\004\010\212\001\002\000\004\022\205" +
    "\001\002\000\056\005\076\016\025\017\067\020\072\021" +
    "\016\023\060\025\101\026\053\034\066\035\064\036\071" +
    "\037\057\040\062\043\103\046\075\050\021\052\070\054" +
    "\024\055\055\060\100\061\073\062\054\001\002\000\040" +
    "\004\131\005\117\006\123\007\120\012\134\013\137\014" +
    "\122\015\130\022\135\027\136\030\125\031\121\032\124" +
    "\033\127\053\126\001\002\000\032\005\076\017\067\020" +
    "\072\025\101\035\064\036\071\037\057\043\103\046\075" +
    "\052\070\060\100\062\054\001\002\000\004\037\175\001" +
    "\002\000\006\017\170\027\033\001\002\000\032\005\076" +
    "\017\067\020\072\025\101\035\064\036\071\037\057\043" +
    "\103\046\075\052\070\060\100\062\054\001\002\000\074" +
    "\004\uffcb\005\uffcb\006\uffcb\007\uffcb\010\uffcb\012\uffcb\013" +
    "\uffcb\014\uffcb\015\uffcb\017\uffcb\020\uffcb\022\uffcb\025\uffcb" +
    "\027\uffcb\030\uffcb\031\uffcb\032\uffcb\033\uffcb\035\uffcb\036" +
    "\uffcb\037\uffcb\043\uffcb\045\uffcb\046\uffcb\052\uffcb\053\uffcb" +
    "\057\uffcb\060\uffcb\062\uffcb\001\002\000\074\004\uffb1\005" +
    "\uffb1\006\uffb1\007\uffb1\010\uffb1\012\uffb1\013\uffb1\014\uffb1" +
    "\015\uffb1\017\uffb1\020\uffb1\022\uffb1\025\uffb1\027\uffb1\030" +
    "\uffb1\031\uffb1\032\uffb1\033\uffb1\035\uffb1\036\uffb1\037\uffb1" +
    "\043\uffb1\045\uffb1\046\uffb1\052\uffb1\053\uffb1\057\uffb1\060" +
    "\uffb1\062\uffb1\001\002\000\074\004\uffcc\005\uffcc\006\uffcc" +
    "\007\uffcc\010\uffcc\012\uffcc\013\uffcc\014\uffcc\015\uffcc\017" +
    "\uffcc\020\uffcc\022\uffcc\025\uffcc\027\uffcc\030\uffcc\031\uffcc" +
    "\032\uffcc\033\uffcc\035\uffcc\036\uffcc\037\uffcc\043\uffcc\045" +
    "\uffcc\046\uffcc\052\uffcc\053\uffcc\057\uffcc\060\uffcc\062\uffcc" +
    "\001\002\000\004\037\157\001\002\000\076\004\uffc5\005" +
    "\uffc5\006\uffc5\007\uffc5\010\uffc5\011\uffc5\012\uffc5\013\uffc5" +
    "\014\uffc5\015\uffc5\017\uffc5\020\uffc5\022\uffc5\025\uffc5\027" +
    "\uffc5\030\uffc5\031\uffc5\032\uffc5\033\uffc5\035\uffc5\036\uffc5" +
    "\037\154\043\uffc5\045\uffc5\046\uffc5\052\uffc5\053\uffc5\057" +
    "\uffc5\060\uffc5\062\uffc5\001\002\000\074\004\uffd4\005\uffd4" +
    "\006\uffd4\007\uffd4\010\uffd4\012\uffd4\013\uffd4\014\uffd4\015" +
    "\uffd4\017\uffd4\020\uffd4\022\uffd4\025\uffd4\027\uffd4\030\uffd4" +
    "\031\uffd4\032\uffd4\033\uffd4\035\uffd4\036\uffd4\037\uffd4\043" +
    "\uffd4\045\uffd4\046\uffd4\052\uffd4\053\uffd4\057\uffd4\060\uffd4" +
    "\062\uffd4\001\002\000\032\005\uffb4\017\uffb4\020\uffb4\025" +
    "\uffb4\035\uffb4\036\uffb4\037\uffb4\043\uffb4\046\uffb4\052\uffb4" +
    "\060\uffb4\062\uffb4\001\002\000\074\004\uffb2\005\uffb2\006" +
    "\uffb2\007\uffb2\010\uffb2\012\uffb2\013\uffb2\014\uffb2\015\uffb2" +
    "\017\uffb2\020\uffb2\022\uffb2\025\uffb2\027\uffb2\030\uffb2\031" +
    "\uffb2\032\uffb2\033\uffb2\035\uffb2\036\uffb2\037\uffb2\043\uffb2" +
    "\045\uffb2\046\uffb2\052\uffb2\053\uffb2\057\uffb2\060\uffb2\062" +
    "\uffb2\001\002\000\004\010\153\001\002\000\032\005\076" +
    "\017\067\020\072\025\101\035\064\036\071\037\057\043" +
    "\103\046\075\052\070\060\100\062\054\001\002\000\074" +
    "\004\uffb0\005\uffb0\006\uffb0\007\uffb0\010\uffb0\012\uffb0\013" +
    "\uffb0\014\uffb0\015\uffb0\017\uffb0\020\uffb0\022\uffb0\025\uffb0" +
    "\027\uffb0\030\uffb0\031\uffb0\032\uffb0\033\uffb0\035\uffb0\036" +
    "\uffb0\037\uffb0\043\uffb0\045\uffb0\046\uffb0\052\uffb0\053\uffb0" +
    "\057\uffb0\060\uffb0\062\uffb0\001\002\000\032\005\uffb5\017" +
    "\uffb5\020\uffb5\025\uffb5\035\uffb5\036\uffb5\037\uffb5\043\uffb5" +
    "\046\uffb5\052\uffb5\060\uffb5\062\uffb5\001\002\000\074\004" +
    "\uffce\005\uffce\006\uffce\007\uffce\010\uffce\012\uffce\013\uffce" +
    "\014\uffce\015\uffce\017\uffce\020\uffce\022\uffce\025\uffce\027" +
    "\uffce\030\uffce\031\uffce\032\uffce\033\uffce\035\uffce\036\uffce" +
    "\037\uffce\043\uffce\045\uffce\046\uffce\052\uffce\053\uffce\057" +
    "\uffce\060\uffce\062\uffce\001\002\000\012\016\110\021\016" +
    "\050\021\054\024\001\002\000\074\004\uffb3\005\uffb3\006" +
    "\uffb3\007\uffb3\010\uffb3\012\uffb3\013\uffb3\014\uffb3\015\uffb3" +
    "\017\uffb3\020\uffb3\022\uffb3\025\uffb3\027\uffb3\030\uffb3\031" +
    "\uffb3\032\uffb3\033\uffb3\035\uffb3\036\uffb3\037\uffb3\043\uffb3" +
    "\045\uffb3\046\uffb3\052\uffb3\053\uffb3\057\uffb3\060\uffb3\062" +
    "\uffb3\001\002\000\042\004\uffd5\005\uffd5\006\uffd5\007\uffd5" +
    "\010\106\012\uffd5\013\uffd5\014\uffd5\015\uffd5\022\uffd5\027" +
    "\uffd5\030\uffd5\031\uffd5\032\uffd5\033\uffd5\053\uffd5\001\002" +
    "\000\074\004\uffaf\005\uffaf\006\uffaf\007\uffaf\010\uffaf\012" +
    "\uffaf\013\uffaf\014\uffaf\015\uffaf\017\uffaf\020\uffaf\022\uffaf" +
    "\025\uffaf\027\uffaf\030\uffaf\031\uffaf\032\uffaf\033\uffaf\035" +
    "\uffaf\036\uffaf\037\uffaf\043\uffaf\045\uffaf\046\uffaf\052\uffaf" +
    "\053\uffaf\057\uffaf\060\uffaf\062\uffaf\001\002\000\060\005" +
    "\uffe4\016\uffe4\017\uffe4\020\uffe4\021\uffe4\023\uffe4\025\uffe4" +
    "\026\uffe4\034\uffe4\035\uffe4\036\uffe4\037\uffe4\040\uffe4\042" +
    "\uffe4\043\uffe4\046\uffe4\050\uffe4\052\uffe4\054\uffe4\055\uffe4" +
    "\060\uffe4\061\uffe4\062\uffe4\001\002\000\020\016\ufff3\021" +
    "\ufff3\024\ufff3\042\ufff3\047\ufff3\050\ufff3\054\ufff3\001\002" +
    "\000\062\005\uffe2\016\uffe2\017\uffe2\020\uffe2\021\uffe2\023" +
    "\uffe2\025\uffe2\026\uffe2\034\uffe2\035\uffe2\036\uffe2\037\uffe2" +
    "\040\uffe2\042\uffe2\043\uffe2\046\uffe2\050\uffe2\051\uffe2\052" +
    "\uffe2\054\uffe2\055\uffe2\060\uffe2\061\uffe2\062\uffe2\001\002" +
    "\000\004\027\113\001\002\000\006\027\uffeb\037\111\001" +
    "\002\000\004\057\112\001\002\000\074\004\uffd3\005\uffd3" +
    "\006\uffd3\007\uffd3\010\uffd3\012\uffd3\013\uffd3\014\uffd3\015" +
    "\uffd3\017\uffd3\020\uffd3\022\uffd3\025\uffd3\027\uffd3\030\uffd3" +
    "\031\uffd3\032\uffd3\033\uffd3\035\uffd3\036\uffd3\037\uffd3\043" +
    "\uffd3\045\uffd3\046\uffd3\052\uffd3\053\uffd3\057\uffd3\060\uffd3" +
    "\062\uffd3\001\002\000\034\005\076\017\067\020\072\025" +
    "\101\035\064\036\071\037\057\043\103\045\034\046\075" +
    "\052\070\060\100\062\054\001\002\000\074\004\uffd6\005" +
    "\uffd6\006\uffd6\007\uffd6\010\uffd6\012\uffd6\013\uffd6\014\uffd6" +
    "\015\uffd6\017\uffd6\020\uffd6\022\uffd6\025\uffd6\027\uffd6\030" +
    "\uffd6\031\uffd6\032\uffd6\033\uffd6\035\uffd6\036\uffd6\037\uffd6" +
    "\043\uffd6\045\uffd6\046\uffd6\052\uffd6\053\uffd6\057\uffd6\060" +
    "\uffd6\062\uffd6\001\002\000\042\004\131\005\117\006\123" +
    "\007\120\012\134\013\137\014\122\015\130\022\135\027" +
    "\136\030\125\031\121\032\124\033\127\045\133\053\126" +
    "\001\002\000\074\004\uffd5\005\uffd5\006\uffd5\007\uffd5\010" +
    "\uffd5\012\uffd5\013\uffd5\014\uffd5\015\uffd5\017\uffd5\020\uffd5" +
    "\022\uffd5\025\uffd5\027\uffd5\030\uffd5\031\uffd5\032\uffd5\033" +
    "\uffd5\035\uffd5\036\uffd5\037\uffd5\043\uffd5\045\uffd5\046\uffd5" +
    "\052\uffd5\053\uffd5\057\uffd5\060\uffd5\062\uffd5\001\002\000" +
    "\032\005\uffc1\017\uffc1\020\uffc1\025\uffc1\035\uffc1\036\uffc1" +
    "\037\uffc1\043\uffc1\046\uffc1\052\uffc1\060\uffc1\062\uffc1\001" +
    "\002\000\032\005\uffbf\017\uffbf\020\uffbf\025\uffbf\035\uffbf" +
    "\036\uffbf\037\uffbf\043\uffbf\046\uffbf\052\uffbf\060\uffbf\062" +
    "\uffbf\001\002\000\032\005\uffba\017\uffba\020\uffba\025\uffba" +
    "\035\uffba\036\uffba\037\uffba\043\uffba\046\uffba\052\uffba\060" +
    "\uffba\062\uffba\001\002\000\032\005\uffbe\017\uffbe\020\uffbe" +
    "\025\uffbe\035\uffbe\036\uffbe\037\uffbe\043\uffbe\046\uffbe\052" +
    "\uffbe\060\uffbe\062\uffbe\001\002\000\032\005\uffc0\017\uffc0" +
    "\020\uffc0\025\uffc0\035\uffc0\036\uffc0\037\uffc0\043\uffc0\046" +
    "\uffc0\052\uffc0\060\uffc0\062\uffc0\001\002\000\032\005\uffb9" +
    "\017\uffb9\020\uffb9\025\uffb9\035\uffb9\036\uffb9\037\uffb9\043" +
    "\uffb9\046\uffb9\052\uffb9\060\uffb9\062\uffb9\001\002\000\032" +
    "\005\uffb6\017\uffb6\020\uffb6\025\uffb6\035\uffb6\036\uffb6\037" +
    "\uffb6\043\uffb6\046\uffb6\052\uffb6\060\uffb6\062\uffb6\001\002" +
    "\000\032\005\uffb7\017\uffb7\020\uffb7\025\uffb7\035\uffb7\036" +
    "\uffb7\037\uffb7\043\uffb7\046\uffb7\052\uffb7\060\uffb7\062\uffb7" +
    "\001\002\000\032\005\uffb8\017\uffb8\020\uffb8\025\uffb8\035" +
    "\uffb8\036\uffb8\037\uffb8\043\uffb8\046\uffb8\052\uffb8\060\uffb8" +
    "\062\uffb8\001\002\000\032\005\uffbd\017\uffbd\020\uffbd\025" +
    "\uffbd\035\uffbd\036\uffbd\037\uffbd\043\uffbd\046\uffbd\052\uffbd" +
    "\060\uffbd\062\uffbd\001\002\000\032\005\uffc2\017\uffc2\020" +
    "\uffc2\025\uffc2\035\uffc2\036\uffc2\037\uffc2\043\uffc2\046\uffc2" +
    "\052\uffc2\060\uffc2\062\uffc2\001\002\000\032\005\076\017" +
    "\067\020\072\025\101\035\064\036\071\037\057\043\103" +
    "\046\075\052\070\060\100\062\054\001\002\000\074\004" +
    "\uffd2\005\uffd2\006\uffd2\007\uffd2\010\uffd2\012\uffd2\013\uffd2" +
    "\014\uffd2\015\uffd2\017\uffd2\020\uffd2\022\uffd2\025\uffd2\027" +
    "\uffd2\030\uffd2\031\uffd2\032\uffd2\033\uffd2\035\uffd2\036\uffd2" +
    "\037\uffd2\043\uffd2\045\uffd2\046\uffd2\052\uffd2\053\uffd2\057" +
    "\uffd2\060\uffd2\062\uffd2\001\002\000\032\005\uffbc\017\uffbc" +
    "\020\uffbc\025\uffbc\035\uffbc\036\uffbc\037\uffbc\043\uffbc\046" +
    "\uffbc\052\uffbc\060\uffbc\062\uffbc\001\002\000\006\017\142" +
    "\044\143\001\002\000\032\005\076\017\067\020\072\025" +
    "\101\035\064\036\071\037\057\043\103\046\075\052\070" +
    "\060\100\062\054\001\002\000\032\005\uffbb\017\uffbb\020" +
    "\uffbb\025\uffbb\035\uffbb\036\uffbb\037\uffbb\043\uffbb\046\uffbb" +
    "\052\uffbb\060\uffbb\062\uffbb\001\002\000\042\004\131\005" +
    "\117\006\123\007\120\012\134\013\137\014\122\015\130" +
    "\022\135\027\136\030\125\031\121\032\124\033\127\045" +
    "\141\053\126\001\002\000\076\004\uffc3\005\uffc3\006\uffc3" +
    "\007\uffc3\010\uffc3\011\uffc3\012\uffc3\013\uffc3\014\uffc3\015" +
    "\uffc3\017\uffc3\020\uffc3\022\uffc3\025\uffc3\027\uffc3\030\uffc3" +
    "\031\uffc3\032\uffc3\033\uffc3\035\uffc3\036\uffc3\037\uffc3\043" +
    "\uffc3\045\uffc3\046\uffc3\052\uffc3\053\uffc3\057\uffc3\060\uffc3" +
    "\062\uffc3\001\002\000\076\004\uffc4\005\uffc4\006\uffc4\007" +
    "\uffc4\010\uffc4\011\uffc4\012\uffc4\013\uffc4\014\uffc4\015\uffc4" +
    "\017\uffc4\020\uffc4\022\uffc4\025\uffc4\027\uffc4\030\uffc4\031" +
    "\uffc4\032\uffc4\033\uffc4\035\uffc4\036\uffc4\037\144\043\uffc4" +
    "\045\uffc4\046\uffc4\052\uffc4\053\uffc4\057\uffc4\060\uffc4\062" +
    "\uffc4\001\002\000\074\004\uffd1\005\uffd1\006\uffd1\007\uffd1" +
    "\010\uffd1\012\uffd1\013\uffd1\014\uffd1\015\uffd1\017\uffd1\020" +
    "\uffd1\022\uffd1\025\uffd1\027\uffd1\030\uffd1\031\uffd1\032\uffd1" +
    "\033\uffd1\035\uffd1\036\uffd1\037\uffd1\043\uffd1\045\uffd1\046" +
    "\uffd1\052\uffd1\053\uffd1\057\uffd1\060\uffd1\062\uffd1\001\002" +
    "\000\032\005\076\017\067\020\072\025\101\035\064\036" +
    "\071\037\057\043\103\046\075\052\070\060\100\062\054" +
    "\001\002\000\070\004\131\005\117\006\123\007\120\012" +
    "\134\013\137\014\122\015\130\017\uffc9\020\uffc9\022\135" +
    "\025\uffc9\027\136\030\125\031\121\032\124\033\127\035" +
    "\uffc9\036\uffc9\037\uffc9\043\uffc9\046\uffc9\052\uffc9\053\126" +
    "\057\uffc9\060\uffc9\062\uffc9\001\002\000\034\005\076\017" +
    "\067\020\072\025\101\035\064\036\071\037\057\043\103" +
    "\046\075\052\070\057\150\060\100\062\054\001\002\000" +
    "\070\004\131\005\117\006\123\007\120\012\134\013\137" +
    "\014\122\015\130\017\uffc8\020\uffc8\022\135\025\uffc8\027" +
    "\136\030\125\031\121\032\124\033\127\035\uffc8\036\uffc8" +
    "\037\uffc8\043\uffc8\046\uffc8\052\uffc8\053\126\057\uffc8\060" +
    "\uffc8\062\uffc8\001\002\000\074\004\uffc7\005\uffc7\006\uffc7" +
    "\007\uffc7\010\uffc7\012\uffc7\013\uffc7\014\uffc7\015\uffc7\017" +
    "\uffc7\020\uffc7\022\uffc7\025\uffc7\027\uffc7\030\uffc7\031\uffc7" +
    "\032\uffc7\033\uffc7\035\uffc7\036\uffc7\037\uffc7\043\uffc7\045" +
    "\uffc7\046\uffc7\052\uffc7\053\uffc7\057\uffc7\060\uffc7\062\uffc7" +
    "\001\002\000\074\004\131\005\117\006\123\007\120\010" +
    "\uffd0\012\134\013\137\014\122\015\130\017\uffd0\020\uffd0" +
    "\022\135\025\uffd0\027\136\030\125\031\121\032\124\033" +
    "\127\035\uffd0\036\uffd0\037\uffd0\043\uffd0\045\uffd0\046\uffd0" +
    "\052\uffd0\053\126\057\uffd0\060\uffd0\062\uffd0\001\002\000" +
    "\074\004\131\005\117\006\123\007\120\010\uffcf\012\134" +
    "\013\137\014\122\015\130\017\uffcf\020\uffcf\022\135\025" +
    "\uffcf\027\136\030\125\031\121\032\124\033\127\035\uffcf" +
    "\036\uffcf\037\uffcf\043\uffcf\045\uffcf\046\uffcf\052\uffcf\053" +
    "\126\057\uffcf\060\uffcf\062\uffcf\001\002\000\062\005\uffde" +
    "\016\uffde\017\uffde\020\uffde\021\uffde\023\uffde\025\uffde\026" +
    "\uffde\034\uffde\035\uffde\036\uffde\037\uffde\040\uffde\042\uffde" +
    "\043\uffde\046\uffde\050\uffde\051\uffde\052\uffde\054\uffde\055" +
    "\uffde\060\uffde\061\uffde\062\uffde\001\002\000\032\005\076" +
    "\017\067\020\072\025\101\035\064\036\071\037\057\043" +
    "\103\046\075\052\070\060\100\062\054\001\002\000\034" +
    "\005\076\017\067\020\072\025\101\035\064\036\071\037" +
    "\057\043\103\046\075\052\070\057\156\060\100\062\054" +
    "\001\002\000\074\004\uffc6\005\uffc6\006\uffc6\007\uffc6\010" +
    "\uffc6\012\uffc6\013\uffc6\014\uffc6\015\uffc6\017\uffc6\020\uffc6" +
    "\022\uffc6\025\uffc6\027\uffc6\030\uffc6\031\uffc6\032\uffc6\033" +
    "\uffc6\035\uffc6\036\uffc6\037\uffc6\043\uffc6\045\uffc6\046\uffc6" +
    "\052\uffc6\053\uffc6\057\uffc6\060\uffc6\062\uffc6\001\002\000" +
    "\032\005\076\017\067\020\072\025\101\035\064\036\071" +
    "\037\057\043\103\046\075\052\070\060\100\062\054\001" +
    "\002\000\042\004\131\005\117\006\123\007\120\012\134" +
    "\013\137\014\122\015\130\022\135\027\136\030\125\031" +
    "\121\032\124\033\127\053\126\057\161\001\002\000\056" +
    "\005\076\016\025\017\067\020\072\021\016\023\060\025" +
    "\101\026\053\034\066\035\064\036\071\037\057\040\062" +
    "\043\103\046\075\050\021\052\070\054\024\055\055\060" +
    "\100\061\073\062\054\001\002\000\062\005\uffda\016\uffda" +
    "\017\uffda\020\uffda\021\uffda\023\uffda\025\uffda\026\uffda\034" +
    "\uffda\035\uffda\036\uffda\037\uffda\040\uffda\042\uffda\043\uffda" +
    "\046\uffda\050\uffda\051\164\052\uffda\054\uffda\055\uffda\060" +
    "\uffda\061\uffda\062\uffda\001\002\000\062\005\uffe0\016\uffe0" +
    "\017\uffe0\020\uffe0\021\uffe0\023\uffe0\025\uffe0\026\uffe0\034" +
    "\uffe0\035\uffe0\036\uffe0\037\uffe0\040\uffe0\042\uffe0\043\uffe0" +
    "\046\uffe0\050\uffe0\051\uffe0\052\uffe0\054\uffe0\055\uffe0\060" +
    "\uffe0\061\uffe0\062\uffe0\001\002\000\056\005\076\016\025" +
    "\017\067\020\072\021\016\023\060\025\101\026\053\034" +
    "\066\035\064\036\071\037\057\040\062\043\103\046\075" +
    "\050\021\052\070\054\024\055\055\060\100\061\073\062" +
    "\054\001\002\000\062\005\uffd9\016\uffd9\017\uffd9\020\uffd9" +
    "\021\uffd9\023\uffd9\025\uffd9\026\uffd9\034\uffd9\035\uffd9\036" +
    "\uffd9\037\uffd9\040\uffd9\042\uffd9\043\uffd9\046\uffd9\050\uffd9" +
    "\051\uffd9\052\uffd9\054\uffd9\055\uffd9\060\uffd9\061\uffd9\062" +
    "\uffd9\001\002\000\042\004\131\005\117\006\123\007\120" +
    "\010\167\012\134\013\137\014\122\015\130\022\135\027" +
    "\136\030\125\031\121\032\124\033\127\053\126\001\002" +
    "\000\062\005\uffe1\016\uffe1\017\uffe1\020\uffe1\021\uffe1\023" +
    "\uffe1\025\uffe1\026\uffe1\034\uffe1\035\uffe1\036\uffe1\037\uffe1" +
    "\040\uffe1\042\uffe1\043\uffe1\046\uffe1\050\uffe1\051\uffe1\052" +
    "\uffe1\054\uffe1\055\uffe1\060\uffe1\061\uffe1\062\uffe1\001\002" +
    "\000\006\010\uffd8\011\172\001\002\000\004\010\174\001" +
    "\002\000\032\005\076\017\067\020\072\025\101\035\064" +
    "\036\071\037\057\043\103\046\075\052\070\060\100\062" +
    "\054\001\002\000\042\004\131\005\117\006\123\007\120" +
    "\010\uffd7\012\134\013\137\014\122\015\130\022\135\027" +
    "\136\030\125\031\121\032\124\033\127\053\126\001\002" +
    "\000\062\005\uffdb\016\uffdb\017\uffdb\020\uffdb\021\uffdb\023" +
    "\uffdb\025\uffdb\026\uffdb\034\uffdb\035\uffdb\036\uffdb\037\uffdb" +
    "\040\uffdb\042\uffdb\043\uffdb\046\uffdb\050\uffdb\051\uffdb\052" +
    "\uffdb\054\uffdb\055\uffdb\060\uffdb\061\uffdb\062\uffdb\001\002" +
    "\000\032\005\076\017\067\020\072\025\101\035\064\036" +
    "\071\037\057\043\103\046\075\052\070\060\100\062\054" +
    "\001\002\000\042\004\131\005\117\006\123\007\120\012" +
    "\134\013\137\014\122\015\130\022\135\027\136\030\125" +
    "\031\121\032\124\033\127\053\126\057\177\001\002\000" +
    "\056\005\076\016\025\017\067\020\072\021\016\023\060" +
    "\025\101\026\053\034\066\035\064\036\071\037\057\040" +
    "\062\043\103\046\075\050\021\052\070\054\024\055\055" +
    "\060\100\061\073\062\054\001\002\000\062\005\uffdf\016" +
    "\uffdf\017\uffdf\020\uffdf\021\uffdf\023\uffdf\025\uffdf\026\uffdf" +
    "\034\uffdf\035\uffdf\036\uffdf\037\uffdf\040\uffdf\042\uffdf\043" +
    "\uffdf\046\uffdf\050\uffdf\051\uffdf\052\uffdf\054\uffdf\055\uffdf" +
    "\060\uffdf\061\uffdf\062\uffdf\001\002\000\042\004\131\005" +
    "\117\006\123\007\120\012\134\013\137\014\122\015\130" +
    "\022\135\027\136\030\125\031\121\032\124\033\127\053" +
    "\126\057\202\001\002\000\074\004\uffcd\005\uffcd\006\uffcd" +
    "\007\uffcd\010\uffcd\012\uffcd\013\uffcd\014\uffcd\015\uffcd\017" +
    "\uffcd\020\uffcd\022\uffcd\025\uffcd\027\uffcd\030\uffcd\031\uffcd" +
    "\032\uffcd\033\uffcd\035\uffcd\036\uffcd\037\uffcd\043\uffcd\045" +
    "\uffcd\046\uffcd\052\uffcd\053\uffcd\057\uffcd\060\uffcd\062\uffcd" +
    "\001\002\000\004\042\204\001\002\000\062\005\uffdc\016" +
    "\uffdc\017\uffdc\020\uffdc\021\uffdc\023\uffdc\025\uffdc\026\uffdc" +
    "\034\uffdc\035\uffdc\036\uffdc\037\uffdc\040\uffdc\042\uffdc\043" +
    "\uffdc\046\uffdc\050\uffdc\051\uffdc\052\uffdc\054\uffdc\055\uffdc" +
    "\060\uffdc\061\uffdc\062\uffdc\001\002\000\004\017\206\001" +
    "\002\000\004\037\207\001\002\000\032\005\076\017\067" +
    "\020\072\025\101\035\064\036\071\037\057\043\103\046" +
    "\075\052\070\060\100\062\054\001\002\000\034\005\076" +
    "\017\067\020\072\025\101\035\064\036\071\037\057\043" +
    "\103\046\075\052\070\057\211\060\100\062\054\001\002" +
    "\000\074\004\uffca\005\uffca\006\uffca\007\uffca\010\uffca\012" +
    "\uffca\013\uffca\014\uffca\015\uffca\017\uffca\020\uffca\022\uffca" +
    "\025\uffca\027\uffca\030\uffca\031\uffca\032\uffca\033\uffca\035" +
    "\uffca\036\uffca\037\uffca\043\uffca\045\uffca\046\uffca\052\uffca" +
    "\053\uffca\057\uffca\060\uffca\062\uffca\001\002\000\062\005" +
    "\uffdd\016\uffdd\017\uffdd\020\uffdd\021\uffdd\023\uffdd\025\uffdd" +
    "\026\uffdd\034\uffdd\035\uffdd\036\uffdd\037\uffdd\040\uffdd\042" +
    "\uffdd\043\uffdd\046\uffdd\050\uffdd\051\uffdd\052\uffdd\054\uffdd" +
    "\055\uffdd\060\uffdd\061\uffdd\062\uffdd\001\002\000\032\005" +
    "\076\017\067\020\072\025\101\035\064\036\071\037\057" +
    "\043\103\046\075\052\070\060\100\062\054\001\002\000" +
    "\042\004\131\005\117\006\123\007\120\010\215\012\134" +
    "\013\137\014\122\015\130\022\135\027\136\030\125\031" +
    "\121\032\124\033\127\053\126\001\002\000\062\005\uffe3" +
    "\016\uffe3\017\uffe3\020\uffe3\021\uffe3\023\uffe3\025\uffe3\026" +
    "\uffe3\034\uffe3\035\uffe3\036\uffe3\037\uffe3\040\uffe3\042\uffe3" +
    "\043\uffe3\046\uffe3\050\uffe3\051\uffe3\052\uffe3\054\uffe3\055" +
    "\uffe3\060\uffe3\061\uffe3\062\uffe3\001\002\000\006\041\217" +
    "\057\uffe7\001\002\000\012\016\025\021\016\050\021\054" +
    "\024\001\002\000\004\057\uffe6\001\002\000\006\017\224" +
    "\027\033\001\002\000\004\017\223\001\002\000\004\037" +
    "\ufff0\001\002\000\004\037\ufff2\001\002\000\004\055\ufffb" +
    "\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\223\000\006\010\003\015\004\001\001\000\004\007" +
    "\006\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\012\012\001\001\000" +
    "\002\001\001\000\002\001\001\000\016\005\025\011\014" +
    "\013\017\016\022\017\027\020\026\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\005\220\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\014\005" +
    "\025\011\014\013\017\017\040\020\026\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\006\031\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\005\043\014" +
    "\044\021\045\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\004\050\001" +
    "\001\000\024\002\055\003\103\005\060\022\101\023\064" +
    "\025\062\026\051\030\073\031\076\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\024\002\055" +
    "\003\202\005\060\022\101\023\064\025\062\026\051\030" +
    "\073\031\076\001\001\000\004\027\131\001\001\000\020" +
    "\002\200\022\115\023\064\025\062\026\113\030\073\031" +
    "\076\001\001\000\002\001\001\000\002\001\001\000\020" +
    "\002\165\022\115\023\064\025\062\026\113\030\073\031" +
    "\076\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\020\002\151\022\115\023\064\025\062\026\113\030" +
    "\073\031\076\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\005\106\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\020" +
    "\002\114\022\115\023\064\025\062\026\113\030\073\031" +
    "\076\001\001\000\002\001\001\000\004\027\131\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\020\002\150" +
    "\022\115\023\064\025\062\026\113\030\073\031\076\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\020\002\137\022\115\023\064\025\062\026\113\030" +
    "\073\031\076\001\001\000\002\001\001\000\004\027\131" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\022\002\144\022\115\023\064\024\145\025\062" +
    "\026\113\030\073\031\076\001\001\000\004\027\131\001" +
    "\001\000\020\002\146\022\115\023\064\025\062\026\113" +
    "\030\073\031\076\001\001\000\004\027\131\001\001\000" +
    "\002\001\001\000\004\027\131\001\001\000\004\027\131" +
    "\001\001\000\002\001\001\000\022\002\144\022\115\023" +
    "\064\024\154\025\062\026\113\030\073\031\076\001\001" +
    "\000\020\002\146\022\115\023\064\025\062\026\113\030" +
    "\073\031\076\001\001\000\002\001\001\000\020\002\157" +
    "\022\115\023\064\025\062\026\113\030\073\031\076\001" +
    "\001\000\004\027\131\001\001\000\024\002\055\003\161" +
    "\005\060\022\101\023\064\025\062\026\051\030\073\031" +
    "\076\001\001\000\004\032\162\001\001\000\002\001\001" +
    "\000\024\002\055\003\164\005\060\022\101\023\064\025" +
    "\062\026\051\030\073\031\076\001\001\000\002\001\001" +
    "\000\004\027\131\001\001\000\002\001\001\000\004\033" +
    "\170\001\001\000\002\001\001\000\020\002\172\022\115" +
    "\023\064\025\062\026\113\030\073\031\076\001\001\000" +
    "\004\027\131\001\001\000\002\001\001\000\020\002\175" +
    "\022\115\023\064\025\062\026\113\030\073\031\076\001" +
    "\001\000\004\027\131\001\001\000\024\002\055\003\177" +
    "\005\060\022\101\023\064\025\062\026\051\030\073\031" +
    "\076\001\001\000\002\001\001\000\004\027\131\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\022\002\144\022\115" +
    "\023\064\024\207\025\062\026\113\030\073\031\076\001" +
    "\001\000\020\002\146\022\115\023\064\025\062\026\113" +
    "\030\073\031\076\001\001\000\002\001\001\000\002\001" +
    "\001\000\020\002\213\022\115\023\064\025\062\026\113" +
    "\030\073\031\076\001\001\000\004\027\131\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\005\043\014\217" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$SlpCup$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$SlpCup$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$SlpCup$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** Scan to get the next Symbol. */
  public java_cup.runtime.Symbol scan()
    throws java.lang.Exception
    {

	Token t = (Token)lexer.next_token();
	if (printTokens)
		System.out.println(t.getLine() + ":" + t);
	return t; 

    }


	/** Causes the parsr to print every token it reads.
	 * This is useful for debugging.
	 */
	public boolean printTokens;
	
	private Lexer lexer;

	public Parser(Lexer lexer) {
		super(lexer);
		this.lexer = lexer;
	}
	                 
	public int getLine() {
		return lexer.getLineNumber();
	}
	
	public void syntax_error(Symbol s) {
		Token tok = (Token) s;
		System.out.println("\nLine " + tok.getLine()+": Syntax error. unexpected token: " + tok.toString());
	}
	
	public static void print_rule(String rule_text) {
		System.out.print("\nReduced rule: " + rule_text);
	}

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$SlpCup$actions {
  private final SlpCup parser;

  /** Constructor */
  CUP$SlpCup$actions(SlpCup parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$SlpCup$do_action(
    int                        CUP$SlpCup$act_num,
    java_cup.runtime.lr_parser CUP$SlpCup$parser,
    java.util.Stack            CUP$SlpCup$stack,
    int                        CUP$SlpCup$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$SlpCup$result;

      /* select the action based on the action number */
      switch (CUP$SlpCup$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // literal ::= NULL 
            {
              Object RESULT =null;

              CUP$SlpCup$result = parser.getSymbolFactory().newSymbol("literal",23, ((java_cup.runtime.Symbol)CUP$SlpCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$SlpCup$stack.peek()), RESULT);
            }
          return CUP$SlpCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // literal ::= FALSE 
            {
              Object RESULT =null;

              CUP$SlpCup$result = parser.getSymbolFactory().newSymbol("literal",23, ((java_cup.runtime.Symbol)CUP$SlpCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$SlpCup$stack.peek()), RESULT);
            }
          return CUP$SlpCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // literal ::= TRUE 
            {
              Object RESULT =null;

              CUP$SlpCup$result = parser.getSymbolFactory().newSymbol("literal",23, ((java_cup.runtime.Symbol)CUP$SlpCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$SlpCup$stack.peek()), RESULT);
            }
          return CUP$SlpCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // literal ::= QUOTE 
            {
              Object RESULT =null;

              CUP$SlpCup$result = parser.getSymbolFactory().newSymbol("literal",23, ((java_cup.runtime.Symbol)CUP$SlpCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$SlpCup$stack.peek()), RESULT);
            }
          return CUP$SlpCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // literal ::= INTEGER 
            {
              Object RESULT =null;

              CUP$SlpCup$result = parser.getSymbolFactory().newSymbol("literal",23, ((java_cup.runtime.Symbol)CUP$SlpCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$SlpCup$stack.peek()), RESULT);
            }
          return CUP$SlpCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // unop ::= LNEG 
            {
              Object RESULT =null;

              CUP$SlpCup$result = parser.getSymbolFactory().newSymbol("unop",22, ((java_cup.runtime.Symbol)CUP$SlpCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$SlpCup$stack.peek()), RESULT);
            }
          return CUP$SlpCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // unop ::= MINUS 
            {
              Object RESULT =null;

              CUP$SlpCup$result = parser.getSymbolFactory().newSymbol("unop",22, ((java_cup.runtime.Symbol)CUP$SlpCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$SlpCup$stack.peek()), RESULT);
            }
          return CUP$SlpCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // binop ::= MOD 
            {
              Object RESULT =null;

              CUP$SlpCup$result = parser.getSymbolFactory().newSymbol("binop",21, ((java_cup.runtime.Symbol)CUP$SlpCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$SlpCup$stack.peek()), RESULT);
            }
          return CUP$SlpCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // binop ::= NEQUAL 
            {
              Object RESULT =null;

              CUP$SlpCup$result = parser.getSymbolFactory().newSymbol("binop",21, ((java_cup.runtime.Symbol)CUP$SlpCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$SlpCup$stack.peek()), RESULT);
            }
          return CUP$SlpCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // binop ::= EQUAL 
            {
              Object RESULT =null;

              CUP$SlpCup$result = parser.getSymbolFactory().newSymbol("binop",21, ((java_cup.runtime.Symbol)CUP$SlpCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$SlpCup$stack.peek()), RESULT);
            }
          return CUP$SlpCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // binop ::= LTE 
            {
              Object RESULT =null;

              CUP$SlpCup$result = parser.getSymbolFactory().newSymbol("binop",21, ((java_cup.runtime.Symbol)CUP$SlpCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$SlpCup$stack.peek()), RESULT);
            }
          return CUP$SlpCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // binop ::= GTE 
            {
              Object RESULT =null;

              CUP$SlpCup$result = parser.getSymbolFactory().newSymbol("binop",21, ((java_cup.runtime.Symbol)CUP$SlpCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$SlpCup$stack.peek()), RESULT);
            }
          return CUP$SlpCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // binop ::= LT 
            {
              Object RESULT =null;

              CUP$SlpCup$result = parser.getSymbolFactory().newSymbol("binop",21, ((java_cup.runtime.Symbol)CUP$SlpCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$SlpCup$stack.peek()), RESULT);
            }
          return CUP$SlpCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // binop ::= GT 
            {
              Object RESULT =null;

              CUP$SlpCup$result = parser.getSymbolFactory().newSymbol("binop",21, ((java_cup.runtime.Symbol)CUP$SlpCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$SlpCup$stack.peek()), RESULT);
            }
          return CUP$SlpCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // binop ::= LOR 
            {
              Object RESULT =null;

              CUP$SlpCup$result = parser.getSymbolFactory().newSymbol("binop",21, ((java_cup.runtime.Symbol)CUP$SlpCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$SlpCup$stack.peek()), RESULT);
            }
          return CUP$SlpCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // binop ::= LAND 
            {
              Object RESULT =null;

              CUP$SlpCup$result = parser.getSymbolFactory().newSymbol("binop",21, ((java_cup.runtime.Symbol)CUP$SlpCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$SlpCup$stack.peek()), RESULT);
            }
          return CUP$SlpCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // binop ::= DIVIDE 
            {
              Object RESULT =null;

              CUP$SlpCup$result = parser.getSymbolFactory().newSymbol("binop",21, ((java_cup.runtime.Symbol)CUP$SlpCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$SlpCup$stack.peek()), RESULT);
            }
          return CUP$SlpCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // binop ::= MULTIPLY 
            {
              Object RESULT =null;

              CUP$SlpCup$result = parser.getSymbolFactory().newSymbol("binop",21, ((java_cup.runtime.Symbol)CUP$SlpCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$SlpCup$stack.peek()), RESULT);
            }
          return CUP$SlpCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // binop ::= MINUS 
            {
              Object RESULT =null;

              CUP$SlpCup$result = parser.getSymbolFactory().newSymbol("binop",21, ((java_cup.runtime.Symbol)CUP$SlpCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$SlpCup$stack.peek()), RESULT);
            }
          return CUP$SlpCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // binop ::= PLUS 
            {
              Object RESULT =null;

              CUP$SlpCup$result = parser.getSymbolFactory().newSymbol("binop",21, ((java_cup.runtime.Symbol)CUP$SlpCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$SlpCup$stack.peek()), RESULT);
            }
          return CUP$SlpCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // location ::= expr LB expr RB 
            {
              Object RESULT =null;

              CUP$SlpCup$result = parser.getSymbolFactory().newSymbol("location",20, ((java_cup.runtime.Symbol)CUP$SlpCup$stack.elementAt(CUP$SlpCup$top-3)), ((java_cup.runtime.Symbol)CUP$SlpCup$stack.peek()), RESULT);
            }
          return CUP$SlpCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // location ::= expr DOT ID 
            {
              Object RESULT =null;

              CUP$SlpCup$result = parser.getSymbolFactory().newSymbol("location",20, ((java_cup.runtime.Symbol)CUP$SlpCup$stack.elementAt(CUP$SlpCup$top-2)), ((java_cup.runtime.Symbol)CUP$SlpCup$stack.peek()), RESULT);
            }
          return CUP$SlpCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // location ::= ID 
            {
              Object RESULT =null;

              CUP$SlpCup$result = parser.getSymbolFactory().newSymbol("location",20, ((java_cup.runtime.Symbol)CUP$SlpCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$SlpCup$stack.peek()), RESULT);
            }
          return CUP$SlpCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // virtualCall ::= ID LP expr_list RP 
            {
              Object RESULT =null;

              CUP$SlpCup$result = parser.getSymbolFactory().newSymbol("virtualCall",19, ((java_cup.runtime.Symbol)CUP$SlpCup$stack.elementAt(CUP$SlpCup$top-3)), ((java_cup.runtime.Symbol)CUP$SlpCup$stack.peek()), RESULT);
            }
          return CUP$SlpCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // virtualCall ::= expr DOT ID LP expr_list RP 
            {
              Object RESULT =null;

              CUP$SlpCup$result = parser.getSymbolFactory().newSymbol("virtualCall",19, ((java_cup.runtime.Symbol)CUP$SlpCup$stack.elementAt(CUP$SlpCup$top-5)), ((java_cup.runtime.Symbol)CUP$SlpCup$stack.peek()), RESULT);
            }
          return CUP$SlpCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // expr_list ::= expr_list expr 
            {
              Object RESULT =null;

              CUP$SlpCup$result = parser.getSymbolFactory().newSymbol("expr_list",18, ((java_cup.runtime.Symbol)CUP$SlpCup$stack.elementAt(CUP$SlpCup$top-1)), ((java_cup.runtime.Symbol)CUP$SlpCup$stack.peek()), RESULT);
            }
          return CUP$SlpCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // expr_list ::= expr 
            {
              Object RESULT =null;

              CUP$SlpCup$result = parser.getSymbolFactory().newSymbol("expr_list",18, ((java_cup.runtime.Symbol)CUP$SlpCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$SlpCup$stack.peek()), RESULT);
            }
          return CUP$SlpCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // staticCall ::= CLASS DOT ID LP expr_list RP 
            {
              Object RESULT =null;

              CUP$SlpCup$result = parser.getSymbolFactory().newSymbol("staticCall",17, ((java_cup.runtime.Symbol)CUP$SlpCup$stack.elementAt(CUP$SlpCup$top-5)), ((java_cup.runtime.Symbol)CUP$SlpCup$stack.peek()), RESULT);
            }
          return CUP$SlpCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // call ::= virtualCall 
            {
              Object RESULT =null;
		int vmleft = ((java_cup.runtime.Symbol)CUP$SlpCup$stack.peek()).left;
		int vmright = ((java_cup.runtime.Symbol)CUP$SlpCup$stack.peek()).right;
		Object vm = (Object)((java_cup.runtime.Symbol) CUP$SlpCup$stack.peek()).value;
		 Parser.print_rule("Call -> m1 for vm: " + vm); 
              CUP$SlpCup$result = parser.getSymbolFactory().newSymbol("call",16, ((java_cup.runtime.Symbol)CUP$SlpCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$SlpCup$stack.peek()), RESULT);
            }
          return CUP$SlpCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // call ::= staticCall 
            {
              Object RESULT =null;
		int m1left = ((java_cup.runtime.Symbol)CUP$SlpCup$stack.peek()).left;
		int m1right = ((java_cup.runtime.Symbol)CUP$SlpCup$stack.peek()).right;
		Object m1 = (Object)((java_cup.runtime.Symbol) CUP$SlpCup$stack.peek()).value;
		 Parser.print_rule("Call -> m1 for m1: " + m1); 
              CUP$SlpCup$result = parser.getSymbolFactory().newSymbol("call",16, ((java_cup.runtime.Symbol)CUP$SlpCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$SlpCup$stack.peek()), RESULT);
            }
          return CUP$SlpCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // expr ::= LP expr RP 
            {
              Expr RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SlpCup$stack.elementAt(CUP$SlpCup$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SlpCup$stack.elementAt(CUP$SlpCup$top-1)).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$SlpCup$stack.elementAt(CUP$SlpCup$top-1)).value;
		
		
              CUP$SlpCup$result = parser.getSymbolFactory().newSymbol("expr",0, ((java_cup.runtime.Symbol)CUP$SlpCup$stack.elementAt(CUP$SlpCup$top-2)), ((java_cup.runtime.Symbol)CUP$SlpCup$stack.peek()), RESULT);
            }
          return CUP$SlpCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // expr ::= literal 
            {
              Expr RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$SlpCup$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$SlpCup$stack.peek()).right;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$SlpCup$stack.peek()).value;
		
		
              CUP$SlpCup$result = parser.getSymbolFactory().newSymbol("expr",0, ((java_cup.runtime.Symbol)CUP$SlpCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$SlpCup$stack.peek()), RESULT);
            }
          return CUP$SlpCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // expr ::= unop expr 
            {
              Expr RESULT =null;
		int uleft = ((java_cup.runtime.Symbol)CUP$SlpCup$stack.elementAt(CUP$SlpCup$top-1)).left;
		int uright = ((java_cup.runtime.Symbol)CUP$SlpCup$stack.elementAt(CUP$SlpCup$top-1)).right;
		Object u = (Object)((java_cup.runtime.Symbol) CUP$SlpCup$stack.elementAt(CUP$SlpCup$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SlpCup$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SlpCup$stack.peek()).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$SlpCup$stack.peek()).value;
		 /*RESULT = new UnaryOpExpr(e,u);*/
		
              CUP$SlpCup$result = parser.getSymbolFactory().newSymbol("expr",0, ((java_cup.runtime.Symbol)CUP$SlpCup$stack.elementAt(CUP$SlpCup$top-1)), ((java_cup.runtime.Symbol)CUP$SlpCup$stack.peek()), RESULT);
            }
          return CUP$SlpCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // expr ::= expr binop expr 
            {
              Expr RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SlpCup$stack.elementAt(CUP$SlpCup$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SlpCup$stack.elementAt(CUP$SlpCup$top-2)).right;
		Expr e1 = (Expr)((java_cup.runtime.Symbol) CUP$SlpCup$stack.elementAt(CUP$SlpCup$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$SlpCup$stack.elementAt(CUP$SlpCup$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$SlpCup$stack.elementAt(CUP$SlpCup$top-1)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$SlpCup$stack.elementAt(CUP$SlpCup$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$SlpCup$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$SlpCup$stack.peek()).right;
		Expr e2 = (Expr)((java_cup.runtime.Symbol) CUP$SlpCup$stack.peek()).value;
		 
		
              CUP$SlpCup$result = parser.getSymbolFactory().newSymbol("expr",0, ((java_cup.runtime.Symbol)CUP$SlpCup$stack.elementAt(CUP$SlpCup$top-2)), ((java_cup.runtime.Symbol)CUP$SlpCup$stack.peek()), RESULT);
            }
          return CUP$SlpCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // expr ::= expr DOT LENGTH 
            {
              Expr RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SlpCup$stack.elementAt(CUP$SlpCup$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SlpCup$stack.elementAt(CUP$SlpCup$top-2)).right;
		Expr e1 = (Expr)((java_cup.runtime.Symbol) CUP$SlpCup$stack.elementAt(CUP$SlpCup$top-2)).value;
		 
		
              CUP$SlpCup$result = parser.getSymbolFactory().newSymbol("expr",0, ((java_cup.runtime.Symbol)CUP$SlpCup$stack.elementAt(CUP$SlpCup$top-2)), ((java_cup.runtime.Symbol)CUP$SlpCup$stack.peek()), RESULT);
            }
          return CUP$SlpCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // expr ::= NEW type LB expr RB 
            {
              Expr RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$SlpCup$stack.elementAt(CUP$SlpCup$top-3)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$SlpCup$stack.elementAt(CUP$SlpCup$top-3)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$SlpCup$stack.elementAt(CUP$SlpCup$top-3)).value;
		 
		
              CUP$SlpCup$result = parser.getSymbolFactory().newSymbol("expr",0, ((java_cup.runtime.Symbol)CUP$SlpCup$stack.elementAt(CUP$SlpCup$top-4)), ((java_cup.runtime.Symbol)CUP$SlpCup$stack.peek()), RESULT);
            }
          return CUP$SlpCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // expr ::= NEW CLASS_ID LP RP 
            {
              Expr RESULT =null;
		int cidleft = ((java_cup.runtime.Symbol)CUP$SlpCup$stack.elementAt(CUP$SlpCup$top-2)).left;
		int cidright = ((java_cup.runtime.Symbol)CUP$SlpCup$stack.elementAt(CUP$SlpCup$top-2)).right;
		String cid = (String)((java_cup.runtime.Symbol) CUP$SlpCup$stack.elementAt(CUP$SlpCup$top-2)).value;
		 
		
              CUP$SlpCup$result = parser.getSymbolFactory().newSymbol("expr",0, ((java_cup.runtime.Symbol)CUP$SlpCup$stack.elementAt(CUP$SlpCup$top-3)), ((java_cup.runtime.Symbol)CUP$SlpCup$stack.peek()), RESULT);
            }
          return CUP$SlpCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // expr ::= THIS 
            {
              Expr RESULT =null;
		 /*RESULT = THIS*/
		
              CUP$SlpCup$result = parser.getSymbolFactory().newSymbol("expr",0, ((java_cup.runtime.Symbol)CUP$SlpCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$SlpCup$stack.peek()), RESULT);
            }
          return CUP$SlpCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // expr ::= call 
            {
              Expr RESULT =null;
		int c1left = ((java_cup.runtime.Symbol)CUP$SlpCup$stack.peek()).left;
		int c1right = ((java_cup.runtime.Symbol)CUP$SlpCup$stack.peek()).right;
		Object c1 = (Object)((java_cup.runtime.Symbol) CUP$SlpCup$stack.peek()).value;
		 /*RESULT = new Call(c1);*/
		
              CUP$SlpCup$result = parser.getSymbolFactory().newSymbol("expr",0, ((java_cup.runtime.Symbol)CUP$SlpCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$SlpCup$stack.peek()), RESULT);
            }
          return CUP$SlpCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // expr ::= location 
            {
              Expr RESULT =null;

              CUP$SlpCup$result = parser.getSymbolFactory().newSymbol("expr",0, ((java_cup.runtime.Symbol)CUP$SlpCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$SlpCup$stack.peek()), RESULT);
            }
          return CUP$SlpCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // assign_exp ::= ASSIGN expr 
            {
              Object RESULT =null;

              CUP$SlpCup$result = parser.getSymbolFactory().newSymbol("assign_exp",25, ((java_cup.runtime.Symbol)CUP$SlpCup$stack.elementAt(CUP$SlpCup$top-1)), ((java_cup.runtime.Symbol)CUP$SlpCup$stack.peek()), RESULT);
            }
          return CUP$SlpCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // assign_exp ::= 
            {
              Object RESULT =null;

              CUP$SlpCup$result = parser.getSymbolFactory().newSymbol("assign_exp",25, ((java_cup.runtime.Symbol)CUP$SlpCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$SlpCup$stack.peek()), RESULT);
            }
          return CUP$SlpCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // else_stmnt ::= ELSE stmt 
            {
              Object RESULT =null;
		 Parser.print_rule("else statement");
              CUP$SlpCup$result = parser.getSymbolFactory().newSymbol("else_stmnt",24, ((java_cup.runtime.Symbol)CUP$SlpCup$stack.elementAt(CUP$SlpCup$top-1)), ((java_cup.runtime.Symbol)CUP$SlpCup$stack.peek()), RESULT);
            }
          return CUP$SlpCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // else_stmnt ::= 
            {
              Object RESULT =null;

              CUP$SlpCup$result = parser.getSymbolFactory().newSymbol("else_stmnt",24, ((java_cup.runtime.Symbol)CUP$SlpCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$SlpCup$stack.peek()), RESULT);
            }
          return CUP$SlpCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // stmt ::= type ID assign_exp SEMI 
            {
              Stmt RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$SlpCup$stack.elementAt(CUP$SlpCup$top-3)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$SlpCup$stack.elementAt(CUP$SlpCup$top-3)).right;
		String t1 = (String)((java_cup.runtime.Symbol) CUP$SlpCup$stack.elementAt(CUP$SlpCup$top-3)).value;
		int i1left = ((java_cup.runtime.Symbol)CUP$SlpCup$stack.elementAt(CUP$SlpCup$top-2)).left;
		int i1right = ((java_cup.runtime.Symbol)CUP$SlpCup$stack.elementAt(CUP$SlpCup$top-2)).right;
		String i1 = (String)((java_cup.runtime.Symbol) CUP$SlpCup$stack.elementAt(CUP$SlpCup$top-2)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$SlpCup$stack.elementAt(CUP$SlpCup$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SlpCup$stack.elementAt(CUP$SlpCup$top-1)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$SlpCup$stack.elementAt(CUP$SlpCup$top-1)).value;
		 Parser.print_rule("stmt -> t1 i1 = e1  for t1: " + t1 + "i1: " + i1 + "e1: " + e1);
              CUP$SlpCup$result = parser.getSymbolFactory().newSymbol("stmt",1, ((java_cup.runtime.Symbol)CUP$SlpCup$stack.elementAt(CUP$SlpCup$top-3)), ((java_cup.runtime.Symbol)CUP$SlpCup$stack.peek()), RESULT);
            }
          return CUP$SlpCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // stmt ::= LCBR stmt RCBR 
            {
              Stmt RESULT =null;

              CUP$SlpCup$result = parser.getSymbolFactory().newSymbol("stmt",1, ((java_cup.runtime.Symbol)CUP$SlpCup$stack.elementAt(CUP$SlpCup$top-2)), ((java_cup.runtime.Symbol)CUP$SlpCup$stack.peek()), RESULT);
            }
          return CUP$SlpCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // stmt ::= CONTINUE SEMI 
            {
              Stmt RESULT =null;
		 Parser.print_rule("stmt -> Continue");
              CUP$SlpCup$result = parser.getSymbolFactory().newSymbol("stmt",1, ((java_cup.runtime.Symbol)CUP$SlpCup$stack.elementAt(CUP$SlpCup$top-1)), ((java_cup.runtime.Symbol)CUP$SlpCup$stack.peek()), RESULT);
            }
          return CUP$SlpCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // stmt ::= BREAK SEMI 
            {
              Stmt RESULT =null;
		 Parser.print_rule("stmt -> Break");
              CUP$SlpCup$result = parser.getSymbolFactory().newSymbol("stmt",1, ((java_cup.runtime.Symbol)CUP$SlpCup$stack.elementAt(CUP$SlpCup$top-1)), ((java_cup.runtime.Symbol)CUP$SlpCup$stack.peek()), RESULT);
            }
          return CUP$SlpCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // stmt ::= WHILE LP expr RP stmt 
            {
              Stmt RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SlpCup$stack.elementAt(CUP$SlpCup$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SlpCup$stack.elementAt(CUP$SlpCup$top-2)).right;
		Expr e1 = (Expr)((java_cup.runtime.Symbol) CUP$SlpCup$stack.elementAt(CUP$SlpCup$top-2)).value;
		 Parser.print_rule("stmt -> while e1 for: " + e1);
              CUP$SlpCup$result = parser.getSymbolFactory().newSymbol("stmt",1, ((java_cup.runtime.Symbol)CUP$SlpCup$stack.elementAt(CUP$SlpCup$top-4)), ((java_cup.runtime.Symbol)CUP$SlpCup$stack.peek()), RESULT);
            }
          return CUP$SlpCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // stmt ::= IF LP expr RP stmt else_stmnt 
            {
              Stmt RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SlpCup$stack.elementAt(CUP$SlpCup$top-3)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SlpCup$stack.elementAt(CUP$SlpCup$top-3)).right;
		Expr e1 = (Expr)((java_cup.runtime.Symbol) CUP$SlpCup$stack.elementAt(CUP$SlpCup$top-3)).value;
		 Parser.print_rule("stmt -> if e1 for: " + e1);
              CUP$SlpCup$result = parser.getSymbolFactory().newSymbol("stmt",1, ((java_cup.runtime.Symbol)CUP$SlpCup$stack.elementAt(CUP$SlpCup$top-5)), ((java_cup.runtime.Symbol)CUP$SlpCup$stack.peek()), RESULT);
            }
          return CUP$SlpCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // stmt ::= RETURN expr SEMI 
            {
              Stmt RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SlpCup$stack.elementAt(CUP$SlpCup$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SlpCup$stack.elementAt(CUP$SlpCup$top-1)).right;
		Expr e1 = (Expr)((java_cup.runtime.Symbol) CUP$SlpCup$stack.elementAt(CUP$SlpCup$top-1)).value;
		 Parser.print_rule("stmt -> return e1 for: " + e1);
              CUP$SlpCup$result = parser.getSymbolFactory().newSymbol("stmt",1, ((java_cup.runtime.Symbol)CUP$SlpCup$stack.elementAt(CUP$SlpCup$top-2)), ((java_cup.runtime.Symbol)CUP$SlpCup$stack.peek()), RESULT);
            }
          return CUP$SlpCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // stmt ::= call SEMI 
            {
              Stmt RESULT =null;

              CUP$SlpCup$result = parser.getSymbolFactory().newSymbol("stmt",1, ((java_cup.runtime.Symbol)CUP$SlpCup$stack.elementAt(CUP$SlpCup$top-1)), ((java_cup.runtime.Symbol)CUP$SlpCup$stack.peek()), RESULT);
            }
          return CUP$SlpCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // stmt ::= location ASSIGN expr SEMI 
            {
              Stmt RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$SlpCup$stack.elementAt(CUP$SlpCup$top-3)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$SlpCup$stack.elementAt(CUP$SlpCup$top-3)).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$SlpCup$stack.elementAt(CUP$SlpCup$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SlpCup$stack.elementAt(CUP$SlpCup$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SlpCup$stack.elementAt(CUP$SlpCup$top-1)).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$SlpCup$stack.elementAt(CUP$SlpCup$top-1)).value;
		 /*VarExpr ve = new VarExpr(v); RESULT = new AssignStmt(ve, e);*/
	Parser.print_rule("stmt -> v = e for v: " + v + "and e :" + e); 
              CUP$SlpCup$result = parser.getSymbolFactory().newSymbol("stmt",1, ((java_cup.runtime.Symbol)CUP$SlpCup$stack.elementAt(CUP$SlpCup$top-3)), ((java_cup.runtime.Symbol)CUP$SlpCup$stack.peek()), RESULT);
            }
          return CUP$SlpCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // stmt_list ::= stmt_list stmt 
            {
              StmtList RESULT =null;
		int slleft = ((java_cup.runtime.Symbol)CUP$SlpCup$stack.elementAt(CUP$SlpCup$top-1)).left;
		int slright = ((java_cup.runtime.Symbol)CUP$SlpCup$stack.elementAt(CUP$SlpCup$top-1)).right;
		StmtList sl = (StmtList)((java_cup.runtime.Symbol) CUP$SlpCup$stack.elementAt(CUP$SlpCup$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$SlpCup$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$SlpCup$stack.peek()).right;
		Stmt s = (Stmt)((java_cup.runtime.Symbol) CUP$SlpCup$stack.peek()).value;
		 sl.addStmt(s); RESULT = sl; 
              CUP$SlpCup$result = parser.getSymbolFactory().newSymbol("stmt_list",2, ((java_cup.runtime.Symbol)CUP$SlpCup$stack.elementAt(CUP$SlpCup$top-1)), ((java_cup.runtime.Symbol)CUP$SlpCup$stack.peek()), RESULT);
            }
          return CUP$SlpCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // stmt_list ::= 
            {
              StmtList RESULT =null;
		  
              CUP$SlpCup$result = parser.getSymbolFactory().newSymbol("stmt_list",2, ((java_cup.runtime.Symbol)CUP$SlpCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$SlpCup$stack.peek()), RESULT);
            }
          return CUP$SlpCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // formals ::= type ID COMMA formals 
            {
              String RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$SlpCup$stack.elementAt(CUP$SlpCup$top-3)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$SlpCup$stack.elementAt(CUP$SlpCup$top-3)).right;
		String t1 = (String)((java_cup.runtime.Symbol) CUP$SlpCup$stack.elementAt(CUP$SlpCup$top-3)).value;
		int i1left = ((java_cup.runtime.Symbol)CUP$SlpCup$stack.elementAt(CUP$SlpCup$top-2)).left;
		int i1right = ((java_cup.runtime.Symbol)CUP$SlpCup$stack.elementAt(CUP$SlpCup$top-2)).right;
		String i1 = (String)((java_cup.runtime.Symbol) CUP$SlpCup$stack.elementAt(CUP$SlpCup$top-2)).value;
		int fl1left = ((java_cup.runtime.Symbol)CUP$SlpCup$stack.peek()).left;
		int fl1right = ((java_cup.runtime.Symbol)CUP$SlpCup$stack.peek()).right;
		String fl1 = (String)((java_cup.runtime.Symbol) CUP$SlpCup$stack.peek()).value;
		 RESULT = t1 + " " + i1 + ", " + fl1;
		Parser.print_rule("formals-> 't1 i1, fl1' for t1="+t1+" and i1="+i1+" and fl1="+fl1); 
              CUP$SlpCup$result = parser.getSymbolFactory().newSymbol("formals",10, ((java_cup.runtime.Symbol)CUP$SlpCup$stack.elementAt(CUP$SlpCup$top-3)), ((java_cup.runtime.Symbol)CUP$SlpCup$stack.peek()), RESULT);
            }
          return CUP$SlpCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // formals ::= type ID 
            {
              String RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$SlpCup$stack.elementAt(CUP$SlpCup$top-1)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$SlpCup$stack.elementAt(CUP$SlpCup$top-1)).right;
		String t1 = (String)((java_cup.runtime.Symbol) CUP$SlpCup$stack.elementAt(CUP$SlpCup$top-1)).value;
		int i1left = ((java_cup.runtime.Symbol)CUP$SlpCup$stack.peek()).left;
		int i1right = ((java_cup.runtime.Symbol)CUP$SlpCup$stack.peek()).right;
		String i1 = (String)((java_cup.runtime.Symbol) CUP$SlpCup$stack.peek()).value;
		 RESULT = t1 + " " + i1;
		Parser.print_rule("formals-> 't1 i1' for t1="+t1+" and i1="+i1); 
              CUP$SlpCup$result = parser.getSymbolFactory().newSymbol("formals",10, ((java_cup.runtime.Symbol)CUP$SlpCup$stack.elementAt(CUP$SlpCup$top-1)), ((java_cup.runtime.Symbol)CUP$SlpCup$stack.peek()), RESULT);
            }
          return CUP$SlpCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // maybe_formals ::= formals 
            {
              Object RESULT =null;
		int fl1left = ((java_cup.runtime.Symbol)CUP$SlpCup$stack.peek()).left;
		int fl1right = ((java_cup.runtime.Symbol)CUP$SlpCup$stack.peek()).right;
		String fl1 = (String)((java_cup.runtime.Symbol) CUP$SlpCup$stack.peek()).value;
		 Parser.print_rule("maybe_formals-> 'fl1' for fl1=" + fl1); 
              CUP$SlpCup$result = parser.getSymbolFactory().newSymbol("maybe_formals",15, ((java_cup.runtime.Symbol)CUP$SlpCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$SlpCup$stack.peek()), RESULT);
            }
          return CUP$SlpCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // maybe_formals ::= 
            {
              Object RESULT =null;
		 Parser.print_rule("maybe_formals-> ''"); 
              CUP$SlpCup$result = parser.getSymbolFactory().newSymbol("maybe_formals",15, ((java_cup.runtime.Symbol)CUP$SlpCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$SlpCup$stack.peek()), RESULT);
            }
          return CUP$SlpCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // type ::= type LB RB 
            {
              String RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$SlpCup$stack.elementAt(CUP$SlpCup$top-2)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$SlpCup$stack.elementAt(CUP$SlpCup$top-2)).right;
		String t1 = (String)((java_cup.runtime.Symbol) CUP$SlpCup$stack.elementAt(CUP$SlpCup$top-2)).value;
		 RESULT = t1 + "[]";
		Parser.print_rule("type-> 't1[]' for t1="+t1); 
              CUP$SlpCup$result = parser.getSymbolFactory().newSymbol("type",3, ((java_cup.runtime.Symbol)CUP$SlpCup$stack.elementAt(CUP$SlpCup$top-2)), ((java_cup.runtime.Symbol)CUP$SlpCup$stack.peek()), RESULT);
            }
          return CUP$SlpCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // type ::= CLASS_ID 
            {
              String RESULT =null;
		int c1left = ((java_cup.runtime.Symbol)CUP$SlpCup$stack.peek()).left;
		int c1right = ((java_cup.runtime.Symbol)CUP$SlpCup$stack.peek()).right;
		String c1 = (String)((java_cup.runtime.Symbol) CUP$SlpCup$stack.peek()).value;
		 RESULT = c1;
		Parser.print_rule("type-> 'c1' for c1="+c1); 
              CUP$SlpCup$result = parser.getSymbolFactory().newSymbol("type",3, ((java_cup.runtime.Symbol)CUP$SlpCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$SlpCup$stack.peek()), RESULT);
            }
          return CUP$SlpCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // type ::= STRING 
            {
              String RESULT =null;
		 RESULT = "STRING";
		Parser.print_rule("type-> 'STRING'"); 
              CUP$SlpCup$result = parser.getSymbolFactory().newSymbol("type",3, ((java_cup.runtime.Symbol)CUP$SlpCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$SlpCup$stack.peek()), RESULT);
            }
          return CUP$SlpCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // type ::= BOOLEAN 
            {
              String RESULT =null;
		 RESULT = "BOOLEAN";
		Parser.print_rule("type-> 'BOOLEAN'"); 
              CUP$SlpCup$result = parser.getSymbolFactory().newSymbol("type",3, ((java_cup.runtime.Symbol)CUP$SlpCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$SlpCup$stack.peek()), RESULT);
            }
          return CUP$SlpCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // type ::= INT 
            {
              String RESULT =null;
		 RESULT = "INT";
		Parser.print_rule("type-> 'INT'"); 
              CUP$SlpCup$result = parser.getSymbolFactory().newSymbol("type",3, ((java_cup.runtime.Symbol)CUP$SlpCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$SlpCup$stack.peek()), RESULT);
            }
          return CUP$SlpCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // stat_type_void ::= VOID ID 
            {
              String RESULT =null;
		int i1left = ((java_cup.runtime.Symbol)CUP$SlpCup$stack.peek()).left;
		int i1right = ((java_cup.runtime.Symbol)CUP$SlpCup$stack.peek()).right;
		String i1 = (String)((java_cup.runtime.Symbol) CUP$SlpCup$stack.peek()).value;
		 RESULT = i1;
		Parser.print_rule("stat_type_void-> 'void i1' for i1="+i1); 
              CUP$SlpCup$result = parser.getSymbolFactory().newSymbol("stat_type_void",9, ((java_cup.runtime.Symbol)CUP$SlpCup$stack.elementAt(CUP$SlpCup$top-1)), ((java_cup.runtime.Symbol)CUP$SlpCup$stack.peek()), RESULT);
            }
          return CUP$SlpCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // stat_type_void ::= STATIC VOID ID 
            {
              String RESULT =null;
		int i1left = ((java_cup.runtime.Symbol)CUP$SlpCup$stack.peek()).left;
		int i1right = ((java_cup.runtime.Symbol)CUP$SlpCup$stack.peek()).right;
		String i1 = (String)((java_cup.runtime.Symbol) CUP$SlpCup$stack.peek()).value;
		 RESULT = i1;
		Parser.print_rule("stat_type_void-> 'static void i1' for i1="+i1); 
              CUP$SlpCup$result = parser.getSymbolFactory().newSymbol("stat_type_void",9, ((java_cup.runtime.Symbol)CUP$SlpCup$stack.elementAt(CUP$SlpCup$top-2)), ((java_cup.runtime.Symbol)CUP$SlpCup$stack.peek()), RESULT);
            }
          return CUP$SlpCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // stat_type_void ::= type ID 
            {
              String RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$SlpCup$stack.elementAt(CUP$SlpCup$top-1)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$SlpCup$stack.elementAt(CUP$SlpCup$top-1)).right;
		String t1 = (String)((java_cup.runtime.Symbol) CUP$SlpCup$stack.elementAt(CUP$SlpCup$top-1)).value;
		int i1left = ((java_cup.runtime.Symbol)CUP$SlpCup$stack.peek()).left;
		int i1right = ((java_cup.runtime.Symbol)CUP$SlpCup$stack.peek()).right;
		String i1 = (String)((java_cup.runtime.Symbol) CUP$SlpCup$stack.peek()).value;
		 RESULT = i1;
		Parser.print_rule("stat_type_void-> 't1 i1' for t1="+t1+" and i1="+i1); 
              CUP$SlpCup$result = parser.getSymbolFactory().newSymbol("stat_type_void",9, ((java_cup.runtime.Symbol)CUP$SlpCup$stack.elementAt(CUP$SlpCup$top-1)), ((java_cup.runtime.Symbol)CUP$SlpCup$stack.peek()), RESULT);
            }
          return CUP$SlpCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // stat_type_void ::= STATIC type ID 
            {
              String RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$SlpCup$stack.elementAt(CUP$SlpCup$top-1)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$SlpCup$stack.elementAt(CUP$SlpCup$top-1)).right;
		String t1 = (String)((java_cup.runtime.Symbol) CUP$SlpCup$stack.elementAt(CUP$SlpCup$top-1)).value;
		int i1left = ((java_cup.runtime.Symbol)CUP$SlpCup$stack.peek()).left;
		int i1right = ((java_cup.runtime.Symbol)CUP$SlpCup$stack.peek()).right;
		String i1 = (String)((java_cup.runtime.Symbol) CUP$SlpCup$stack.peek()).value;
		 RESULT = i1;
		Parser.print_rule("stat_type_void-> 'static t1 i1' for t1="+t1+" and i1="+i1); 
              CUP$SlpCup$result = parser.getSymbolFactory().newSymbol("stat_type_void",9, ((java_cup.runtime.Symbol)CUP$SlpCup$stack.elementAt(CUP$SlpCup$top-2)), ((java_cup.runtime.Symbol)CUP$SlpCup$stack.peek()), RESULT);
            }
          return CUP$SlpCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // method ::= stat_type_void LP maybe_formals RP LCBR stmt_list RCBR 
            {
              String RESULT =null;
		int st1left = ((java_cup.runtime.Symbol)CUP$SlpCup$stack.elementAt(CUP$SlpCup$top-6)).left;
		int st1right = ((java_cup.runtime.Symbol)CUP$SlpCup$stack.elementAt(CUP$SlpCup$top-6)).right;
		String st1 = (String)((java_cup.runtime.Symbol) CUP$SlpCup$stack.elementAt(CUP$SlpCup$top-6)).value;
		 RESULT = st1;
		Parser.print_rule("stat_type_void-> 'st1 (maybe_formals) {stmt_list}' for st1="+st1); 
              CUP$SlpCup$result = parser.getSymbolFactory().newSymbol("method",7, ((java_cup.runtime.Symbol)CUP$SlpCup$stack.elementAt(CUP$SlpCup$top-6)), ((java_cup.runtime.Symbol)CUP$SlpCup$stack.peek()), RESULT);
            }
          return CUP$SlpCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // id_list ::= id_list COMMA ID 
            {
              String RESULT =null;
		int is1left = ((java_cup.runtime.Symbol)CUP$SlpCup$stack.elementAt(CUP$SlpCup$top-2)).left;
		int is1right = ((java_cup.runtime.Symbol)CUP$SlpCup$stack.elementAt(CUP$SlpCup$top-2)).right;
		String is1 = (String)((java_cup.runtime.Symbol) CUP$SlpCup$stack.elementAt(CUP$SlpCup$top-2)).value;
		int i1left = ((java_cup.runtime.Symbol)CUP$SlpCup$stack.peek()).left;
		int i1right = ((java_cup.runtime.Symbol)CUP$SlpCup$stack.peek()).right;
		String i1 = (String)((java_cup.runtime.Symbol) CUP$SlpCup$stack.peek()).value;
		 RESULT = is1 + ", " + i1; 
		Parser.print_rule("id_list-> 'is1, i1' for is1=" + is1 + ", i1="+i1); 
              CUP$SlpCup$result = parser.getSymbolFactory().newSymbol("id_list",4, ((java_cup.runtime.Symbol)CUP$SlpCup$stack.elementAt(CUP$SlpCup$top-2)), ((java_cup.runtime.Symbol)CUP$SlpCup$stack.peek()), RESULT);
            }
          return CUP$SlpCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // id_list ::= 
            {
              String RESULT =null;
		 RESULT = "";
		Parser.print_rule("id_list-> 'empty'"); 
              CUP$SlpCup$result = parser.getSymbolFactory().newSymbol("id_list",4, ((java_cup.runtime.Symbol)CUP$SlpCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$SlpCup$stack.peek()), RESULT);
            }
          return CUP$SlpCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // field ::= type id_list SEMI 
            {
              Object RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$SlpCup$stack.elementAt(CUP$SlpCup$top-2)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$SlpCup$stack.elementAt(CUP$SlpCup$top-2)).right;
		String t1 = (String)((java_cup.runtime.Symbol) CUP$SlpCup$stack.elementAt(CUP$SlpCup$top-2)).value;
		int is1left = ((java_cup.runtime.Symbol)CUP$SlpCup$stack.elementAt(CUP$SlpCup$top-1)).left;
		int is1right = ((java_cup.runtime.Symbol)CUP$SlpCup$stack.elementAt(CUP$SlpCup$top-1)).right;
		String is1 = (String)((java_cup.runtime.Symbol) CUP$SlpCup$stack.elementAt(CUP$SlpCup$top-1)).value;
		 Parser.print_rule("field-> 't1 is1;' for t1=" + t1 + ", is1="+is1); 
              CUP$SlpCup$result = parser.getSymbolFactory().newSymbol("field",14, ((java_cup.runtime.Symbol)CUP$SlpCup$stack.elementAt(CUP$SlpCup$top-2)), ((java_cup.runtime.Symbol)CUP$SlpCup$stack.peek()), RESULT);
            }
          return CUP$SlpCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // field_meth ::= method 
            {
              Object RESULT =null;
		 Parser.print_rule("field_meth-> 'method'"); 
              CUP$SlpCup$result = parser.getSymbolFactory().newSymbol("field_meth",13, ((java_cup.runtime.Symbol)CUP$SlpCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$SlpCup$stack.peek()), RESULT);
            }
          return CUP$SlpCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // field_meth ::= field 
            {
              Object RESULT =null;
		 Parser.print_rule("field_meth-> 'field'"); 
              CUP$SlpCup$result = parser.getSymbolFactory().newSymbol("field_meth",13, ((java_cup.runtime.Symbol)CUP$SlpCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$SlpCup$stack.peek()), RESULT);
            }
          return CUP$SlpCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // field_meth_list ::= field_meth_list field_meth 
            {
              Object RESULT =null;
		 Parser.print_rule("field_meth_list-> 'field_meth_list field_meth'"); 
              CUP$SlpCup$result = parser.getSymbolFactory().newSymbol("field_meth_list",12, ((java_cup.runtime.Symbol)CUP$SlpCup$stack.elementAt(CUP$SlpCup$top-1)), ((java_cup.runtime.Symbol)CUP$SlpCup$stack.peek()), RESULT);
            }
          return CUP$SlpCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // field_meth_list ::= field_meth 
            {
              Object RESULT =null;
		 Parser.print_rule("field_meth_list-> 'field_meth'"); 
              CUP$SlpCup$result = parser.getSymbolFactory().newSymbol("field_meth_list",12, ((java_cup.runtime.Symbol)CUP$SlpCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$SlpCup$stack.peek()), RESULT);
            }
          return CUP$SlpCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // extend ::= EXTENDS CLASS_ID 
            {
              String RESULT =null;
		int c1left = ((java_cup.runtime.Symbol)CUP$SlpCup$stack.peek()).left;
		int c1right = ((java_cup.runtime.Symbol)CUP$SlpCup$stack.peek()).right;
		String c1 = (String)((java_cup.runtime.Symbol) CUP$SlpCup$stack.peek()).value;
		 RESULT = "extends "+c1; 
		Parser.print_rule("extend-> 'extends c1' for c1=" + c1); 
              CUP$SlpCup$result = parser.getSymbolFactory().newSymbol("extend",8, ((java_cup.runtime.Symbol)CUP$SlpCup$stack.elementAt(CUP$SlpCup$top-1)), ((java_cup.runtime.Symbol)CUP$SlpCup$stack.peek()), RESULT);
            }
          return CUP$SlpCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // extend ::= 
            {
              String RESULT =null;
		 RESULT = "";
		Parser.print_rule("extend-> ''"); 
              CUP$SlpCup$result = parser.getSymbolFactory().newSymbol("extend",8, ((java_cup.runtime.Symbol)CUP$SlpCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$SlpCup$stack.peek()), RESULT);
            }
          return CUP$SlpCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // classDecl ::= CLASS CLASS_ID extend LCBR field_meth_list RCBR 
            {
              String RESULT =null;
		int c1left = ((java_cup.runtime.Symbol)CUP$SlpCup$stack.elementAt(CUP$SlpCup$top-4)).left;
		int c1right = ((java_cup.runtime.Symbol)CUP$SlpCup$stack.elementAt(CUP$SlpCup$top-4)).right;
		String c1 = (String)((java_cup.runtime.Symbol) CUP$SlpCup$stack.elementAt(CUP$SlpCup$top-4)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$SlpCup$stack.elementAt(CUP$SlpCup$top-3)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SlpCup$stack.elementAt(CUP$SlpCup$top-3)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$SlpCup$stack.elementAt(CUP$SlpCup$top-3)).value;
		 RESULT = c1;
		Parser.print_rule("classDecl_list-> 'class c1 e1 {fields_and_methods}' for c1=" + c1 + " and e1=" + e1); 
              CUP$SlpCup$result = parser.getSymbolFactory().newSymbol("classDecl",5, ((java_cup.runtime.Symbol)CUP$SlpCup$stack.elementAt(CUP$SlpCup$top-5)), ((java_cup.runtime.Symbol)CUP$SlpCup$stack.peek()), RESULT);
            }
          return CUP$SlpCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // classDecl_list ::= 
            {
              String RESULT =null;
		 Parser.print_rule("classDecl_list-> 'empty'"); 
              CUP$SlpCup$result = parser.getSymbolFactory().newSymbol("classDecl_list",6, ((java_cup.runtime.Symbol)CUP$SlpCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$SlpCup$stack.peek()), RESULT);
            }
          return CUP$SlpCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // classDecl_list ::= classDecl_list classDecl 
            {
              String RESULT =null;
		int cl1left = ((java_cup.runtime.Symbol)CUP$SlpCup$stack.elementAt(CUP$SlpCup$top-1)).left;
		int cl1right = ((java_cup.runtime.Symbol)CUP$SlpCup$stack.elementAt(CUP$SlpCup$top-1)).right;
		String cl1 = (String)((java_cup.runtime.Symbol) CUP$SlpCup$stack.elementAt(CUP$SlpCup$top-1)).value;
		int c1left = ((java_cup.runtime.Symbol)CUP$SlpCup$stack.peek()).left;
		int c1right = ((java_cup.runtime.Symbol)CUP$SlpCup$stack.peek()).right;
		String c1 = (String)((java_cup.runtime.Symbol) CUP$SlpCup$stack.peek()).value;
		 Parser.print_rule("classDecl_list-> 'cl1 c1' for cl1=" + cl1 + " and c1=" + c1); 
              CUP$SlpCup$result = parser.getSymbolFactory().newSymbol("classDecl_list",6, ((java_cup.runtime.Symbol)CUP$SlpCup$stack.elementAt(CUP$SlpCup$top-1)), ((java_cup.runtime.Symbol)CUP$SlpCup$stack.peek()), RESULT);
            }
          return CUP$SlpCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= program EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$SlpCup$stack.elementAt(CUP$SlpCup$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$SlpCup$stack.elementAt(CUP$SlpCup$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$SlpCup$stack.elementAt(CUP$SlpCup$top-1)).value;
		RESULT = start_val;
              CUP$SlpCup$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$SlpCup$stack.elementAt(CUP$SlpCup$top-1)), ((java_cup.runtime.Symbol)CUP$SlpCup$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$SlpCup$parser.done_parsing();
          return CUP$SlpCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // program ::= classDecl_list 
            {
              Object RESULT =null;
		 Parser.print_rule("program-> 'classDecl_list'"); 
              CUP$SlpCup$result = parser.getSymbolFactory().newSymbol("program",11, ((java_cup.runtime.Symbol)CUP$SlpCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$SlpCup$stack.peek()), RESULT);
            }
          return CUP$SlpCup$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

