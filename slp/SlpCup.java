
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Sat Nov 28 19:24:55 IST 2015
//----------------------------------------------------

package slp;

import java_cup.runtime.*;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Sat Nov 28 19:24:55 IST 2015
  */
public class SlpCup extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public SlpCup() {super();}

  /** Constructor which sets the default scanner. */
  public SlpCup(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public SlpCup(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\126\000\002\013\003\000\002\002\004\000\002\010" +
    "\004\000\002\010\002\000\002\014\010\000\002\016\002" +
    "\000\002\016\004\000\002\007\002\000\002\007\004\000" +
    "\002\023\003\000\002\023\003\000\002\024\005\000\002" +
    "\015\003\000\002\015\005\000\002\021\011\000\002\017" +
    "\005\000\002\017\004\000\002\017\005\000\002\017\004" +
    "\000\002\020\003\000\002\020\003\000\002\020\003\000" +
    "\002\020\003\000\002\020\005\000\002\012\002\000\002" +
    "\012\003\000\002\011\004\000\002\011\006\000\002\006" +
    "\002\000\002\006\004\000\002\003\006\000\002\003\004" +
    "\000\002\003\005\000\002\003\010\000\002\003\007\000" +
    "\002\003\004\000\002\003\004\000\002\003\005\000\002" +
    "\003\006\000\002\033\002\000\002\033\004\000\002\034" +
    "\002\000\002\034\004\000\002\022\002\000\002\022\003" +
    "\000\002\002\003\000\002\002\003\000\002\002\003\000" +
    "\002\002\006\000\002\002\007\000\002\002\005\000\002" +
    "\002\005\000\002\002\004\000\002\002\003\000\002\002" +
    "\005\000\002\025\003\000\002\025\003\000\002\026\010" +
    "\000\002\027\002\000\002\027\003\000\002\027\005\000" +
    "\002\030\010\000\002\030\006\000\002\031\003\000\002" +
    "\031\005\000\002\031\006\000\002\004\003\000\002\004" +
    "\003\000\002\004\003\000\002\004\003\000\002\004\003" +
    "\000\002\004\003\000\002\004\003\000\002\004\003\000" +
    "\002\004\003\000\002\004\003\000\002\004\003\000\002" +
    "\004\003\000\002\004\003\000\002\005\003\000\002\005" +
    "\003\000\002\032\003\000\002\032\003\000\002\032\003" +
    "\000\002\032\003\000\002\032\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\225\000\006\002\ufffe\063\ufffe\001\002\000\006\002" +
    "\001\063\010\001\002\000\004\002\006\001\002\000\004" +
    "\002\000\001\002\000\006\002\uffff\063\uffff\001\002\000" +
    "\004\017\011\001\002\000\006\056\ufffc\057\012\001\002" +
    "\000\004\017\227\001\002\000\004\056\014\001\002\000" +
    "\020\017\ufffa\022\ufffa\025\ufffa\043\ufffa\050\ufffa\051\ufffa" +
    "\055\ufffa\001\002\000\020\017\025\022\017\025\020\043" +
    "\026\050\023\051\022\055\024\001\002\000\020\017\ufff7" +
    "\022\ufff7\025\ufff7\043\ufff7\050\ufff7\051\ufff7\055\ufff7\001" +
    "\002\000\006\020\uffee\030\uffee\001\002\000\014\017\025" +
    "\022\017\050\224\051\022\055\024\001\002\000\004\040" +
    "\042\001\002\000\006\020\uffed\030\uffed\001\002\000\004" +
    "\020\041\001\002\000\006\020\uffec\030\uffec\001\002\000" +
    "\006\020\uffeb\030\uffeb\001\002\000\006\002\ufffd\063\ufffd" +
    "\001\002\000\006\020\032\030\034\001\002\000\020\017" +
    "\ufff8\022\ufff8\025\ufff8\043\ufff8\050\ufff8\051\ufff8\055\ufff8" +
    "\001\002\000\020\017\ufff9\022\ufff9\025\ufff9\043\ufff9\050" +
    "\ufff9\051\ufff9\055\ufff9\001\002\000\010\011\ufff5\040\ufff1" +
    "\042\ufff5\001\002\000\006\011\037\042\036\001\002\000" +
    "\004\046\035\001\002\000\006\020\uffea\030\uffea\001\002" +
    "\000\004\020\040\001\002\000\020\017\ufff6\022\ufff6\025" +
    "\ufff6\043\ufff6\050\ufff6\051\ufff6\055\ufff6\001\002\000\006" +
    "\011\ufff4\042\ufff4\001\002\000\004\040\uffef\001\002\000" +
    "\014\017\025\022\017\051\022\055\024\060\uffe9\001\002" +
    "\000\006\020\220\030\034\001\002\000\004\060\uffe8\001" +
    "\002\000\004\060\046\001\002\000\004\056\047\001\002" +
    "\000\056\005\uffe5\017\uffe5\020\uffe5\021\uffe5\022\uffe5\024" +
    "\uffe5\026\uffe5\027\uffe5\035\uffe5\036\uffe5\037\uffe5\040\uffe5" +
    "\041\uffe5\043\uffe5\044\uffe5\047\uffe5\051\uffe5\053\uffe5\055" +
    "\uffe5\056\uffe5\061\uffe5\062\uffe5\001\002\000\056\005\074" +
    "\017\100\020\065\021\070\022\017\024\056\026\077\027" +
    "\052\035\064\036\062\037\067\040\055\041\060\043\104" +
    "\044\102\047\073\051\022\053\066\055\024\056\053\061" +
    "\076\062\071\001\002\000\042\004\uffd4\005\uffd4\007\uffd4" +
    "\010\uffd4\012\215\013\uffd4\014\uffd4\015\uffd4\016\uffd4\023" +
    "\uffd4\030\uffd4\031\uffd4\032\uffd4\033\uffd4\034\uffd4\054\uffd4" +
    "\001\002\000\004\011\214\001\002\000\056\005\uffe5\017" +
    "\uffe5\020\uffe5\021\uffe5\022\uffe5\024\uffe5\026\uffe5\027\uffe5" +
    "\035\uffe5\036\uffe5\037\uffe5\040\uffe5\041\uffe5\043\uffe5\044" +
    "\uffe5\047\uffe5\051\uffe5\053\uffe5\055\uffe5\056\uffe5\061\uffe5" +
    "\062\uffe5\001\002\000\040\004\133\005\121\007\125\010" +
    "\122\013\136\014\140\015\124\016\132\023\135\030\137" +
    "\031\126\032\123\033\127\034\130\054\131\001\002\000" +
    "\032\005\074\017\115\020\065\021\070\026\077\036\062" +
    "\037\067\040\055\044\102\047\073\053\066\061\076\001" +
    "\002\000\004\040\204\001\002\000\006\020\177\030\034" +
    "\001\002\000\034\005\074\011\uffd6\017\115\020\065\021" +
    "\070\026\077\036\062\037\067\040\055\044\102\047\073" +
    "\053\066\061\076\001\002\000\050\004\uffc9\005\uffc9\007" +
    "\uffc9\010\uffc9\011\uffc9\013\uffc9\014\uffc9\015\uffc9\016\uffc9" +
    "\023\uffc9\030\uffc9\031\uffc9\032\uffc9\033\uffc9\034\uffc9\042" +
    "\uffc9\046\uffc9\054\uffc9\060\uffc9\001\002\000\050\004\uffae" +
    "\005\uffae\007\uffae\010\uffae\011\uffae\013\uffae\014\uffae\015" +
    "\uffae\016\uffae\023\uffae\030\uffae\031\uffae\032\uffae\033\uffae" +
    "\034\uffae\042\uffae\046\uffae\054\uffae\060\uffae\001\002\000" +
    "\050\004\uffca\005\uffca\007\uffca\010\uffca\011\uffca\013\uffca" +
    "\014\uffca\015\uffca\016\uffca\023\uffca\030\uffca\031\uffca\032" +
    "\uffca\033\uffca\034\uffca\042\uffca\046\uffca\054\uffca\060\uffca" +
    "\001\002\000\004\040\165\001\002\000\054\004\uffc2\005" +
    "\uffc2\007\uffc2\010\uffc2\011\uffc2\012\uffc2\013\uffc2\014\uffc2" +
    "\015\uffc2\016\uffc2\023\uffc2\030\uffc2\031\uffc2\032\uffc2\033" +
    "\uffc2\034\uffc2\040\162\042\uffc2\046\uffc2\054\uffc2\060\uffc2" +
    "\001\002\000\050\004\uffd2\005\uffd2\007\uffd2\010\uffd2\011" +
    "\uffd2\013\uffd2\014\uffd2\015\uffd2\016\uffd2\023\uffd2\030\uffd2" +
    "\031\uffd2\032\uffd2\033\uffd2\034\uffd2\042\uffd2\046\uffd2\054" +
    "\uffd2\060\uffd2\001\002\000\032\005\uffb1\017\uffb1\020\uffb1" +
    "\021\uffb1\026\uffb1\036\uffb1\037\uffb1\040\uffb1\044\uffb1\047" +
    "\uffb1\053\uffb1\061\uffb1\001\002\000\050\004\uffaf\005\uffaf" +
    "\007\uffaf\010\uffaf\011\uffaf\013\uffaf\014\uffaf\015\uffaf\016" +
    "\uffaf\023\uffaf\030\uffaf\031\uffaf\032\uffaf\033\uffaf\034\uffaf" +
    "\042\uffaf\046\uffaf\054\uffaf\060\uffaf\001\002\000\004\011" +
    "\161\001\002\000\032\005\074\017\115\020\065\021\070" +
    "\026\077\036\062\037\067\040\055\044\102\047\073\053" +
    "\066\061\076\001\002\000\050\004\uffad\005\uffad\007\uffad" +
    "\010\uffad\011\uffad\013\uffad\014\uffad\015\uffad\016\uffad\023" +
    "\uffad\030\uffad\031\uffad\032\uffad\033\uffad\034\uffad\042\uffad" +
    "\046\uffad\054\uffad\060\uffad\001\002\000\032\005\uffb2\017" +
    "\uffb2\020\uffb2\021\uffb2\026\uffb2\036\uffb2\037\uffb2\040\uffb2" +
    "\044\uffb2\047\uffb2\053\uffb2\061\uffb2\001\002\000\050\004" +
    "\uffcc\005\uffcc\007\uffcc\010\uffcc\011\uffcc\013\uffcc\014\uffcc" +
    "\015\uffcc\016\uffcc\023\uffcc\030\uffcc\031\uffcc\032\uffcc\033" +
    "\uffcc\034\uffcc\042\uffcc\046\uffcc\054\uffcc\060\uffcc\001\002" +
    "\000\012\017\151\022\017\051\022\055\024\001\002\000" +
    "\050\004\uffb0\005\uffb0\007\uffb0\010\uffb0\011\uffb0\013\uffb0" +
    "\014\uffb0\015\uffb0\016\uffb0\023\uffb0\030\uffb0\031\uffb0\032" +
    "\uffb0\033\uffb0\034\uffb0\042\uffb0\046\uffb0\054\uffb0\060\uffb0" +
    "\001\002\000\010\020\uffeb\023\106\030\uffeb\001\002\000" +
    "\042\004\uffd3\005\uffd3\007\uffd3\010\uffd3\011\105\013\uffd3" +
    "\014\uffd3\015\uffd3\016\uffd3\023\uffd3\030\uffd3\031\uffd3\032" +
    "\uffd3\033\uffd3\034\uffd3\054\uffd3\001\002\000\050\004\uffac" +
    "\005\uffac\007\uffac\010\uffac\011\uffac\013\uffac\014\uffac\015" +
    "\uffac\016\uffac\023\uffac\030\uffac\031\uffac\032\uffac\033\uffac" +
    "\034\uffac\042\uffac\046\uffac\054\uffac\060\uffac\001\002\000" +
    "\056\005\uffe4\017\uffe4\020\uffe4\021\uffe4\022\uffe4\024\uffe4" +
    "\026\uffe4\027\uffe4\035\uffe4\036\uffe4\037\uffe4\040\uffe4\041" +
    "\uffe4\043\uffe4\044\uffe4\047\uffe4\051\uffe4\053\uffe4\055\uffe4" +
    "\056\uffe4\061\uffe4\062\uffe4\001\002\000\020\017\ufff3\022" +
    "\ufff3\025\ufff3\043\ufff3\050\ufff3\051\ufff3\055\ufff3\001\002" +
    "\000\060\005\uffe2\017\uffe2\020\uffe2\021\uffe2\022\uffe2\024" +
    "\uffe2\026\uffe2\027\uffe2\035\uffe2\036\uffe2\037\uffe2\040\uffe2" +
    "\041\uffe2\043\uffe2\044\uffe2\047\uffe2\051\uffe2\052\uffe2\053" +
    "\uffe2\055\uffe2\056\uffe2\061\uffe2\062\uffe2\001\002\000\004" +
    "\020\107\001\002\000\004\040\110\001\002\000\036\005" +
    "\074\017\115\020\065\021\070\026\077\036\062\037\067" +
    "\040\055\042\uffc7\044\102\047\073\053\066\060\uffc7\061" +
    "\076\001\002\000\050\004\uffd4\005\uffd4\007\uffd4\010\uffd4" +
    "\011\uffd4\013\uffd4\014\uffd4\015\uffd4\016\uffd4\023\uffd4\030" +
    "\uffd4\031\uffd4\032\uffd4\033\uffd4\034\uffd4\042\uffd4\046\uffd4" +
    "\054\uffd4\060\uffd4\001\002\000\044\004\133\005\121\007" +
    "\125\010\122\013\136\014\140\015\124\016\132\023\135" +
    "\030\137\031\126\032\123\033\127\034\130\042\uffc6\054" +
    "\131\060\uffc6\001\002\000\006\042\116\060\117\001\002" +
    "\000\050\004\uffd3\005\uffd3\007\uffd3\010\uffd3\011\uffd3\013" +
    "\uffd3\014\uffd3\015\uffd3\016\uffd3\023\uffd3\030\uffd3\031\uffd3" +
    "\032\uffd3\033\uffd3\034\uffd3\042\uffd3\046\uffd3\054\uffd3\060" +
    "\uffd3\001\002\000\004\023\106\001\002\000\032\005\074" +
    "\017\115\020\065\021\070\026\077\036\062\037\067\040" +
    "\055\044\102\047\073\053\066\061\076\001\002\000\050" +
    "\004\uffc8\005\uffc8\007\uffc8\010\uffc8\011\uffc8\013\uffc8\014" +
    "\uffc8\015\uffc8\016\uffc8\023\uffc8\030\uffc8\031\uffc8\032\uffc8" +
    "\033\uffc8\034\uffc8\042\uffc8\046\uffc8\054\uffc8\060\uffc8\001" +
    "\002\000\044\004\133\005\121\007\125\010\122\013\136" +
    "\014\140\015\124\016\132\023\135\030\137\031\126\032" +
    "\123\033\127\034\130\042\uffc5\054\131\060\uffc5\001\002" +
    "\000\032\005\uffbe\017\uffbe\020\uffbe\021\uffbe\026\uffbe\036" +
    "\uffbe\037\uffbe\040\uffbe\044\uffbe\047\uffbe\053\uffbe\061\uffbe" +
    "\001\002\000\032\005\uffbc\017\uffbc\020\uffbc\021\uffbc\026" +
    "\uffbc\036\uffbc\037\uffbc\040\uffbc\044\uffbc\047\uffbc\053\uffbc" +
    "\061\uffbc\001\002\000\032\005\uffb7\017\uffb7\020\uffb7\021" +
    "\uffb7\026\uffb7\036\uffb7\037\uffb7\040\uffb7\044\uffb7\047\uffb7" +
    "\053\uffb7\061\uffb7\001\002\000\032\005\uffbb\017\uffbb\020" +
    "\uffbb\021\uffbb\026\uffbb\036\uffbb\037\uffbb\040\uffbb\044\uffbb" +
    "\047\uffbb\053\uffbb\061\uffbb\001\002\000\032\005\uffbd\017" +
    "\uffbd\020\uffbd\021\uffbd\026\uffbd\036\uffbd\037\uffbd\040\uffbd" +
    "\044\uffbd\047\uffbd\053\uffbd\061\uffbd\001\002\000\032\005" +
    "\uffb3\017\uffb3\020\uffb3\021\uffb3\026\uffb3\036\uffb3\037\uffb3" +
    "\040\uffb3\044\uffb3\047\uffb3\053\uffb3\061\uffb3\001\002\000" +
    "\032\005\uffb6\017\uffb6\020\uffb6\021\uffb6\026\uffb6\036\uffb6" +
    "\037\uffb6\040\uffb6\044\uffb6\047\uffb6\053\uffb6\061\uffb6\001" +
    "\002\000\032\005\uffb5\017\uffb5\020\uffb5\021\uffb5\026\uffb5" +
    "\036\uffb5\037\uffb5\040\uffb5\044\uffb5\047\uffb5\053\uffb5\061" +
    "\uffb5\001\002\000\032\005\uffb4\017\uffb4\020\uffb4\021\uffb4" +
    "\026\uffb4\036\uffb4\037\uffb4\040\uffb4\044\uffb4\047\uffb4\053" +
    "\uffb4\061\uffb4\001\002\000\032\005\uffba\017\uffba\020\uffba" +
    "\021\uffba\026\uffba\036\uffba\037\uffba\040\uffba\044\uffba\047" +
    "\uffba\053\uffba\061\uffba\001\002\000\032\005\uffbf\017\uffbf" +
    "\020\uffbf\021\uffbf\026\uffbf\036\uffbf\037\uffbf\040\uffbf\044" +
    "\uffbf\047\uffbf\053\uffbf\061\uffbf\001\002\000\032\005\074" +
    "\017\115\020\065\021\070\026\077\036\062\037\067\040" +
    "\055\044\102\047\073\053\066\061\076\001\002\000\006" +
    "\020\143\045\144\001\002\000\032\005\uffb9\017\uffb9\020" +
    "\uffb9\021\uffb9\026\uffb9\036\uffb9\037\uffb9\040\uffb9\044\uffb9" +
    "\047\uffb9\053\uffb9\061\uffb9\001\002\000\032\005\074\017" +
    "\115\020\065\021\070\026\077\036\062\037\067\040\055" +
    "\044\102\047\073\053\066\061\076\001\002\000\032\005" +
    "\uffb8\017\uffb8\020\uffb8\021\uffb8\026\uffb8\036\uffb8\037\uffb8" +
    "\040\uffb8\044\uffb8\047\uffb8\053\uffb8\061\uffb8\001\002\000" +
    "\042\004\133\005\121\007\125\010\122\013\136\014\140" +
    "\015\124\016\132\023\135\030\137\031\126\032\123\033" +
    "\127\034\130\046\142\054\131\001\002\000\052\004\uffc0" +
    "\005\uffc0\007\uffc0\010\uffc0\011\uffc0\012\uffc0\013\uffc0\014" +
    "\uffc0\015\uffc0\016\uffc0\023\uffc0\030\uffc0\031\uffc0\032\uffc0" +
    "\033\uffc0\034\uffc0\042\uffc0\046\uffc0\054\uffc0\060\uffc0\001" +
    "\002\000\054\004\uffc1\005\uffc1\007\uffc1\010\uffc1\011\uffc1" +
    "\012\uffc1\013\uffc1\014\uffc1\015\uffc1\016\uffc1\023\uffc1\030" +
    "\uffc1\031\uffc1\032\uffc1\033\uffc1\034\uffc1\040\145\042\uffc1" +
    "\046\uffc1\054\uffc1\060\uffc1\001\002\000\050\004\uffcf\005" +
    "\uffcf\007\uffcf\010\uffcf\011\uffcf\013\uffcf\014\uffcf\015\uffcf" +
    "\016\uffcf\023\uffcf\030\uffcf\031\uffcf\032\uffcf\033\uffcf\034" +
    "\uffcf\042\uffcf\046\uffcf\054\uffcf\060\uffcf\001\002\000\036" +
    "\005\074\017\115\020\065\021\070\026\077\036\062\037" +
    "\067\040\055\042\uffc7\044\102\047\073\053\066\060\uffc7" +
    "\061\076\001\002\000\006\042\116\060\147\001\002\000" +
    "\050\004\uffc4\005\uffc4\007\uffc4\010\uffc4\011\uffc4\013\uffc4" +
    "\014\uffc4\015\uffc4\016\uffc4\023\uffc4\030\uffc4\031\uffc4\032" +
    "\uffc4\033\uffc4\034\uffc4\042\uffc4\046\uffc4\054\uffc4\060\uffc4" +
    "\001\002\000\050\004\133\005\121\007\125\010\122\011" +
    "\uffce\013\136\014\140\015\124\016\132\023\135\030\137" +
    "\031\126\032\123\033\127\034\130\042\uffce\046\uffce\054" +
    "\131\060\uffce\001\002\000\006\030\uffeb\040\156\001\002" +
    "\000\004\030\153\001\002\000\034\005\074\017\115\020" +
    "\065\021\070\026\077\036\062\037\067\040\055\044\102" +
    "\046\035\047\073\053\066\061\076\001\002\000\042\004" +
    "\133\005\121\007\125\010\122\013\136\014\140\015\124" +
    "\016\132\023\135\030\137\031\126\032\123\033\127\034" +
    "\130\046\155\054\131\001\002\000\050\004\uffd0\005\uffd0" +
    "\007\uffd0\010\uffd0\011\uffd0\013\uffd0\014\uffd0\015\uffd0\016" +
    "\uffd0\023\uffd0\030\uffd0\031\uffd0\032\uffd0\033\uffd0\034\uffd0" +
    "\042\uffd0\046\uffd0\054\uffd0\060\uffd0\001\002\000\004\060" +
    "\157\001\002\000\050\004\uffd1\005\uffd1\007\uffd1\010\uffd1" +
    "\011\uffd1\013\uffd1\014\uffd1\015\uffd1\016\uffd1\023\uffd1\030" +
    "\uffd1\031\uffd1\032\uffd1\033\uffd1\034\uffd1\042\uffd1\046\uffd1" +
    "\054\uffd1\060\uffd1\001\002\000\050\004\133\005\121\007" +
    "\125\010\122\011\uffcd\013\136\014\140\015\124\016\132" +
    "\023\135\030\137\031\126\032\123\033\127\034\130\042" +
    "\uffcd\046\uffcd\054\131\060\uffcd\001\002\000\060\005\uffde" +
    "\017\uffde\020\uffde\021\uffde\022\uffde\024\uffde\026\uffde\027" +
    "\uffde\035\uffde\036\uffde\037\uffde\040\uffde\041\uffde\043\uffde" +
    "\044\uffde\047\uffde\051\uffde\052\uffde\053\uffde\055\uffde\056" +
    "\uffde\061\uffde\062\uffde\001\002\000\036\005\074\017\115" +
    "\020\065\021\070\026\077\036\062\037\067\040\055\042" +
    "\uffc7\044\102\047\073\053\066\060\uffc7\061\076\001\002" +
    "\000\006\042\116\060\164\001\002\000\050\004\uffc3\005" +
    "\uffc3\007\uffc3\010\uffc3\011\uffc3\013\uffc3\014\uffc3\015\uffc3" +
    "\016\uffc3\023\uffc3\030\uffc3\031\uffc3\032\uffc3\033\uffc3\034" +
    "\uffc3\042\uffc3\046\uffc3\054\uffc3\060\uffc3\001\002\000\032" +
    "\005\074\017\115\020\065\021\070\026\077\036\062\037" +
    "\067\040\055\044\102\047\073\053\066\061\076\001\002" +
    "\000\042\004\133\005\121\007\125\010\122\013\136\014" +
    "\140\015\124\016\132\023\135\030\137\031\126\032\123" +
    "\033\127\034\130\054\131\060\167\001\002\000\054\005" +
    "\074\017\100\020\065\021\070\022\017\024\056\026\077" +
    "\027\052\035\064\036\062\037\067\040\055\041\060\044" +
    "\102\047\073\051\022\053\066\055\024\056\053\061\076" +
    "\062\071\001\002\000\060\005\uffda\017\uffda\020\uffda\021" +
    "\uffda\022\uffda\024\uffda\026\uffda\027\uffda\035\uffda\036\uffda" +
    "\037\uffda\040\uffda\041\uffda\043\uffda\044\uffda\047\uffda\051" +
    "\uffda\052\172\053\uffda\055\uffda\056\uffda\061\uffda\062\uffda" +
    "\001\002\000\060\005\uffe0\017\uffe0\020\uffe0\021\uffe0\022" +
    "\uffe0\024\uffe0\026\uffe0\027\uffe0\035\uffe0\036\uffe0\037\uffe0" +
    "\040\uffe0\041\uffe0\043\uffe0\044\uffe0\047\uffe0\051\uffe0\052" +
    "\uffe0\053\uffe0\055\uffe0\056\uffe0\061\uffe0\062\uffe0\001\002" +
    "\000\054\005\074\017\100\020\065\021\070\022\017\024" +
    "\056\026\077\027\052\035\064\036\062\037\067\040\055" +
    "\041\060\044\102\047\073\051\022\053\066\055\024\056" +
    "\053\061\076\062\071\001\002\000\060\005\uffd9\017\uffd9" +
    "\020\uffd9\021\uffd9\022\uffd9\024\uffd9\026\uffd9\027\uffd9\035" +
    "\uffd9\036\uffd9\037\uffd9\040\uffd9\041\uffd9\043\uffd9\044\uffd9" +
    "\047\uffd9\051\uffd9\052\uffd9\053\uffd9\055\uffd9\056\uffd9\061" +
    "\uffd9\062\uffd9\001\002\000\042\004\133\005\121\007\125" +
    "\010\122\011\uffd5\013\136\014\140\015\124\016\132\023" +
    "\135\030\137\031\126\032\123\033\127\034\130\054\131" +
    "\001\002\000\004\011\176\001\002\000\060\005\uffe1\017" +
    "\uffe1\020\uffe1\021\uffe1\022\uffe1\024\uffe1\026\uffe1\027\uffe1" +
    "\035\uffe1\036\uffe1\037\uffe1\040\uffe1\041\uffe1\043\uffe1\044" +
    "\uffe1\047\uffe1\051\uffe1\052\uffe1\053\uffe1\055\uffe1\056\uffe1" +
    "\061\uffe1\062\uffe1\001\002\000\006\011\uffd8\012\201\001" +
    "\002\000\004\011\203\001\002\000\032\005\074\017\115" +
    "\020\065\021\070\026\077\036\062\037\067\040\055\044" +
    "\102\047\073\053\066\061\076\001\002\000\042\004\133" +
    "\005\121\007\125\010\122\011\uffd7\013\136\014\140\015" +
    "\124\016\132\023\135\030\137\031\126\032\123\033\127" +
    "\034\130\054\131\001\002\000\060\005\uffdb\017\uffdb\020" +
    "\uffdb\021\uffdb\022\uffdb\024\uffdb\026\uffdb\027\uffdb\035\uffdb" +
    "\036\uffdb\037\uffdb\040\uffdb\041\uffdb\043\uffdb\044\uffdb\047" +
    "\uffdb\051\uffdb\052\uffdb\053\uffdb\055\uffdb\056\uffdb\061\uffdb" +
    "\062\uffdb\001\002\000\032\005\074\017\115\020\065\021" +
    "\070\026\077\036\062\037\067\040\055\044\102\047\073" +
    "\053\066\061\076\001\002\000\042\004\133\005\121\007" +
    "\125\010\122\013\136\014\140\015\124\016\132\023\135" +
    "\030\137\031\126\032\123\033\127\034\130\054\131\060" +
    "\206\001\002\000\054\005\074\017\100\020\065\021\070" +
    "\022\017\024\056\026\077\027\052\035\064\036\062\037" +
    "\067\040\055\041\060\044\102\047\073\051\022\053\066" +
    "\055\024\056\053\061\076\062\071\001\002\000\060\005" +
    "\uffdf\017\uffdf\020\uffdf\021\uffdf\022\uffdf\024\uffdf\026\uffdf" +
    "\027\uffdf\035\uffdf\036\uffdf\037\uffdf\040\uffdf\041\uffdf\043" +
    "\uffdf\044\uffdf\047\uffdf\051\uffdf\052\uffdf\053\uffdf\055\uffdf" +
    "\056\uffdf\061\uffdf\062\uffdf\001\002\000\042\004\133\005" +
    "\121\007\125\010\122\013\136\014\140\015\124\016\132" +
    "\023\135\030\137\031\126\032\123\033\127\034\130\054" +
    "\131\060\211\001\002\000\050\004\uffcb\005\uffcb\007\uffcb" +
    "\010\uffcb\011\uffcb\013\uffcb\014\uffcb\015\uffcb\016\uffcb\023" +
    "\uffcb\030\uffcb\031\uffcb\032\uffcb\033\uffcb\034\uffcb\042\uffcb" +
    "\046\uffcb\054\uffcb\060\uffcb\001\002\000\056\005\074\017" +
    "\100\020\065\021\070\022\017\024\056\026\077\027\052" +
    "\035\064\036\062\037\067\040\055\041\060\043\213\044" +
    "\102\047\073\051\022\053\066\055\024\056\053\061\076" +
    "\062\071\001\002\000\060\005\uffdc\017\uffdc\020\uffdc\021" +
    "\uffdc\022\uffdc\024\uffdc\026\uffdc\027\uffdc\035\uffdc\036\uffdc" +
    "\037\uffdc\040\uffdc\041\uffdc\043\uffdc\044\uffdc\047\uffdc\051" +
    "\uffdc\052\uffdc\053\uffdc\055\uffdc\056\uffdc\061\uffdc\062\uffdc" +
    "\001\002\000\060\005\uffdd\017\uffdd\020\uffdd\021\uffdd\022" +
    "\uffdd\024\uffdd\026\uffdd\027\uffdd\035\uffdd\036\uffdd\037\uffdd" +
    "\040\uffdd\041\uffdd\043\uffdd\044\uffdd\047\uffdd\051\uffdd\052" +
    "\uffdd\053\uffdd\055\uffdd\056\uffdd\061\uffdd\062\uffdd\001\002" +
    "\000\032\005\074\017\115\020\065\021\070\026\077\036" +
    "\062\037\067\040\055\044\102\047\073\053\066\061\076" +
    "\001\002\000\042\004\133\005\121\007\125\010\122\011" +
    "\217\013\136\014\140\015\124\016\132\023\135\030\137" +
    "\031\126\032\123\033\127\034\130\054\131\001\002\000" +
    "\060\005\uffe3\017\uffe3\020\uffe3\021\uffe3\022\uffe3\024\uffe3" +
    "\026\uffe3\027\uffe3\035\uffe3\036\uffe3\037\uffe3\040\uffe3\041" +
    "\uffe3\043\uffe3\044\uffe3\047\uffe3\051\uffe3\052\uffe3\053\uffe3" +
    "\055\uffe3\056\uffe3\061\uffe3\062\uffe3\001\002\000\006\042" +
    "\221\060\uffe7\001\002\000\012\017\025\022\017\051\022" +
    "\055\024\001\002\000\004\060\uffe6\001\002\000\006\020" +
    "\226\030\034\001\002\000\004\020\225\001\002\000\004" +
    "\040\ufff0\001\002\000\004\040\ufff2\001\002\000\004\056" +
    "\ufffb\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\225\000\006\010\003\013\004\001\001\000\004\014" +
    "\006\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\016\012\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\007\014\001\001" +
    "\000\014\017\020\020\026\021\015\023\030\024\027\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\020\222" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\015\032\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\011\043\012\044" +
    "\020\042\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\006\047\001\001" +
    "\000\024\002\053\003\102\005\071\020\056\025\100\026" +
    "\062\030\060\031\050\032\074\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\006\211\001\001\000\004\004" +
    "\133\001\001\000\020\002\207\005\071\025\113\026\062" +
    "\030\060\031\110\032\074\001\001\000\002\001\001\000" +
    "\002\001\001\000\022\002\173\005\071\022\174\025\113" +
    "\026\062\030\060\031\110\032\074\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\020\002\157\005\071" +
    "\025\113\026\062\030\060\031\110\032\074\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\020\151\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\022\002\111\005\071\025\113\026\062\027\112" +
    "\030\060\031\110\032\074\001\001\000\002\001\001\000" +
    "\004\004\133\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\020\002\117\005\071\025\113\026" +
    "\062\030\060\031\110\032\074\001\001\000\002\001\001" +
    "\000\004\004\133\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\020" +
    "\002\147\005\071\025\113\026\062\030\060\031\110\032" +
    "\074\001\001\000\002\001\001\000\002\001\001\000\020" +
    "\002\140\005\071\025\113\026\062\030\060\031\110\032" +
    "\074\001\001\000\002\001\001\000\004\004\133\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\022\002\111\005\071\025\113\026\062\027\145\030\060" +
    "\031\110\032\074\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\004\133\001\001\000\002\001\001\000\002" +
    "\001\001\000\020\002\153\005\071\025\113\026\062\030" +
    "\060\031\110\032\074\001\001\000\004\004\133\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\004\133\001\001\000\002\001\001\000\022\002\111" +
    "\005\071\025\113\026\062\027\162\030\060\031\110\032" +
    "\074\001\001\000\002\001\001\000\002\001\001\000\020" +
    "\002\165\005\071\025\113\026\062\030\060\031\110\032" +
    "\074\001\001\000\004\004\133\001\001\000\024\002\053" +
    "\003\167\005\071\020\056\025\100\026\062\030\060\031" +
    "\050\032\074\001\001\000\004\033\170\001\001\000\002" +
    "\001\001\000\024\002\053\003\172\005\071\020\056\025" +
    "\100\026\062\030\060\031\050\032\074\001\001\000\002" +
    "\001\001\000\004\004\133\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\034\177\001\001\000\002\001\001" +
    "\000\020\002\201\005\071\025\113\026\062\030\060\031" +
    "\110\032\074\001\001\000\004\004\133\001\001\000\002" +
    "\001\001\000\020\002\204\005\071\025\113\026\062\030" +
    "\060\031\110\032\074\001\001\000\004\004\133\001\001" +
    "\000\024\002\053\003\206\005\071\020\056\025\100\026" +
    "\062\030\060\031\050\032\074\001\001\000\002\001\001" +
    "\000\004\004\133\001\001\000\002\001\001\000\024\002" +
    "\053\003\102\005\071\020\056\025\100\026\062\030\060" +
    "\031\050\032\074\001\001\000\002\001\001\000\002\001" +
    "\001\000\020\002\215\005\071\025\113\026\062\030\060" +
    "\031\110\032\074\001\001\000\004\004\133\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\011\221\020\042" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$SlpCup$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$SlpCup$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$SlpCup$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** Scan to get the next Symbol. */
  public java_cup.runtime.Symbol scan()
    throws java.lang.Exception
    {

	Token t = (Token)lexer.next_token();
	if (printTokens)
		System.out.println(t.getLine() + ":" + t);
	return t; 

    }


	/** Causes the parsr to print every token it reads.
	 * This is useful for debugging.
	 */
	public boolean printTokens;
	
	private Lexer lexer;

	public Parser(Lexer lexer) {
		super(lexer);
		this.lexer = lexer;
	}
	                 
	public int getLine() {
		return lexer.getLineNumber();
	}
	
	public void syntax_error(Symbol s) {
		Token tok = (Token) s;
		System.out.println("\nLine " + tok.getLine()+": Syntax error. unexpected token: " + tok.toString());
	}
	
	public static void print_rule(String rule_text) {
		//System.out.print("\nReduced rule: " + rule_text);
	}

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$SlpCup$actions {
  private final SlpCup parser;

  /** Constructor */
  CUP$SlpCup$actions(SlpCup parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$SlpCup$do_action(
    int                        CUP$SlpCup$act_num,
    java_cup.runtime.lr_parser CUP$SlpCup$parser,
    java.util.Stack            CUP$SlpCup$stack,
    int                        CUP$SlpCup$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$SlpCup$result;

      /* select the action based on the action number */
      switch (CUP$SlpCup$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // literal ::= NULL 
            {
              ASTNode RESULT =null;

              CUP$SlpCup$result = parser.getSymbolFactory().newSymbol("literal",24, ((java_cup.runtime.Symbol)CUP$SlpCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$SlpCup$stack.peek()), RESULT);
            }
          return CUP$SlpCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // literal ::= FALSE 
            {
              ASTNode RESULT =null;

              CUP$SlpCup$result = parser.getSymbolFactory().newSymbol("literal",24, ((java_cup.runtime.Symbol)CUP$SlpCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$SlpCup$stack.peek()), RESULT);
            }
          return CUP$SlpCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // literal ::= TRUE 
            {
              ASTNode RESULT =null;

              CUP$SlpCup$result = parser.getSymbolFactory().newSymbol("literal",24, ((java_cup.runtime.Symbol)CUP$SlpCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$SlpCup$stack.peek()), RESULT);
            }
          return CUP$SlpCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // literal ::= QUOTE 
            {
              ASTNode RESULT =null;

              CUP$SlpCup$result = parser.getSymbolFactory().newSymbol("literal",24, ((java_cup.runtime.Symbol)CUP$SlpCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$SlpCup$stack.peek()), RESULT);
            }
          return CUP$SlpCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // literal ::= INTEGER 
            {
              ASTNode RESULT =null;

              CUP$SlpCup$result = parser.getSymbolFactory().newSymbol("literal",24, ((java_cup.runtime.Symbol)CUP$SlpCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$SlpCup$stack.peek()), RESULT);
            }
          return CUP$SlpCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // unop ::= LNEG 
            {
              Operator RESULT =null;
		 RESULT = Operator.LNEG; 
              CUP$SlpCup$result = parser.getSymbolFactory().newSymbol("unop",3, ((java_cup.runtime.Symbol)CUP$SlpCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$SlpCup$stack.peek()), RESULT);
            }
          return CUP$SlpCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // unop ::= MINUS 
            {
              Operator RESULT =null;
		 RESULT = Operator.MINUS; 
              CUP$SlpCup$result = parser.getSymbolFactory().newSymbol("unop",3, ((java_cup.runtime.Symbol)CUP$SlpCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$SlpCup$stack.peek()), RESULT);
            }
          return CUP$SlpCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // binop ::= MOD 
            {
              Operator RESULT =null;
		 RESULT = Operator.MOD; 
              CUP$SlpCup$result = parser.getSymbolFactory().newSymbol("binop",2, ((java_cup.runtime.Symbol)CUP$SlpCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$SlpCup$stack.peek()), RESULT);
            }
          return CUP$SlpCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // binop ::= NEQUAL 
            {
              Operator RESULT =null;
		 RESULT = Operator.NEQUAL; 
              CUP$SlpCup$result = parser.getSymbolFactory().newSymbol("binop",2, ((java_cup.runtime.Symbol)CUP$SlpCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$SlpCup$stack.peek()), RESULT);
            }
          return CUP$SlpCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // binop ::= EQUAL 
            {
              Operator RESULT =null;
		 RESULT = Operator.EQUAL; 
              CUP$SlpCup$result = parser.getSymbolFactory().newSymbol("binop",2, ((java_cup.runtime.Symbol)CUP$SlpCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$SlpCup$stack.peek()), RESULT);
            }
          return CUP$SlpCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // binop ::= LTE 
            {
              Operator RESULT =null;
		 RESULT = Operator.LTE; 
              CUP$SlpCup$result = parser.getSymbolFactory().newSymbol("binop",2, ((java_cup.runtime.Symbol)CUP$SlpCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$SlpCup$stack.peek()), RESULT);
            }
          return CUP$SlpCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // binop ::= GTE 
            {
              Operator RESULT =null;
		 RESULT = Operator.GTE; 
              CUP$SlpCup$result = parser.getSymbolFactory().newSymbol("binop",2, ((java_cup.runtime.Symbol)CUP$SlpCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$SlpCup$stack.peek()), RESULT);
            }
          return CUP$SlpCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // binop ::= LT 
            {
              Operator RESULT =null;
		 RESULT = Operator.LT; 
              CUP$SlpCup$result = parser.getSymbolFactory().newSymbol("binop",2, ((java_cup.runtime.Symbol)CUP$SlpCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$SlpCup$stack.peek()), RESULT);
            }
          return CUP$SlpCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // binop ::= GT 
            {
              Operator RESULT =null;
		 RESULT = Operator.GT; 
              CUP$SlpCup$result = parser.getSymbolFactory().newSymbol("binop",2, ((java_cup.runtime.Symbol)CUP$SlpCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$SlpCup$stack.peek()), RESULT);
            }
          return CUP$SlpCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // binop ::= LOR 
            {
              Operator RESULT =null;
		 RESULT = Operator.LOR; 
              CUP$SlpCup$result = parser.getSymbolFactory().newSymbol("binop",2, ((java_cup.runtime.Symbol)CUP$SlpCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$SlpCup$stack.peek()), RESULT);
            }
          return CUP$SlpCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // binop ::= LAND 
            {
              Operator RESULT =null;
		 RESULT = Operator.LAND; 
              CUP$SlpCup$result = parser.getSymbolFactory().newSymbol("binop",2, ((java_cup.runtime.Symbol)CUP$SlpCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$SlpCup$stack.peek()), RESULT);
            }
          return CUP$SlpCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // binop ::= DIVIDE 
            {
              Operator RESULT =null;
		 RESULT = Operator.DIV; 
              CUP$SlpCup$result = parser.getSymbolFactory().newSymbol("binop",2, ((java_cup.runtime.Symbol)CUP$SlpCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$SlpCup$stack.peek()), RESULT);
            }
          return CUP$SlpCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // binop ::= MULTIPLY 
            {
              Operator RESULT =null;
		 RESULT = Operator.MULTIPLY; 
              CUP$SlpCup$result = parser.getSymbolFactory().newSymbol("binop",2, ((java_cup.runtime.Symbol)CUP$SlpCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$SlpCup$stack.peek()), RESULT);
            }
          return CUP$SlpCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // binop ::= MINUS 
            {
              Operator RESULT =null;
		 RESULT = Operator.MINUS; 
              CUP$SlpCup$result = parser.getSymbolFactory().newSymbol("binop",2, ((java_cup.runtime.Symbol)CUP$SlpCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$SlpCup$stack.peek()), RESULT);
            }
          return CUP$SlpCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // binop ::= PLUS 
            {
              Operator RESULT =null;
		 RESULT = Operator.PLUS; 
              CUP$SlpCup$result = parser.getSymbolFactory().newSymbol("binop",2, ((java_cup.runtime.Symbol)CUP$SlpCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$SlpCup$stack.peek()), RESULT);
            }
          return CUP$SlpCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // location ::= expr LB expr RB 
            {
              ASTNode RESULT =null;

              CUP$SlpCup$result = parser.getSymbolFactory().newSymbol("location",23, ((java_cup.runtime.Symbol)CUP$SlpCup$stack.elementAt(CUP$SlpCup$top-3)), ((java_cup.runtime.Symbol)CUP$SlpCup$stack.peek()), RESULT);
            }
          return CUP$SlpCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // location ::= expr DOT ID 
            {
              ASTNode RESULT =null;

              CUP$SlpCup$result = parser.getSymbolFactory().newSymbol("location",23, ((java_cup.runtime.Symbol)CUP$SlpCup$stack.elementAt(CUP$SlpCup$top-2)), ((java_cup.runtime.Symbol)CUP$SlpCup$stack.peek()), RESULT);
            }
          return CUP$SlpCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // location ::= ID 
            {
              ASTNode RESULT =null;

              CUP$SlpCup$result = parser.getSymbolFactory().newSymbol("location",23, ((java_cup.runtime.Symbol)CUP$SlpCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$SlpCup$stack.peek()), RESULT);
            }
          return CUP$SlpCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // virtualCall ::= ID LP expr_list RP 
            {
              ASTNode RESULT =null;
		int i1left = ((java_cup.runtime.Symbol)CUP$SlpCup$stack.elementAt(CUP$SlpCup$top-3)).left;
		int i1right = ((java_cup.runtime.Symbol)CUP$SlpCup$stack.elementAt(CUP$SlpCup$top-3)).right;
		String i1 = (String)((java_cup.runtime.Symbol) CUP$SlpCup$stack.elementAt(CUP$SlpCup$top-3)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$SlpCup$stack.elementAt(CUP$SlpCup$top-1)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$SlpCup$stack.elementAt(CUP$SlpCup$top-1)).right;
		ASTNode e2 = (ASTNode)((java_cup.runtime.Symbol) CUP$SlpCup$stack.elementAt(CUP$SlpCup$top-1)).value;
		 Parser.print_rule("virtualCall -> 'i1(e2)' for i1="+i1); 
              CUP$SlpCup$result = parser.getSymbolFactory().newSymbol("virtualCall",22, ((java_cup.runtime.Symbol)CUP$SlpCup$stack.elementAt(CUP$SlpCup$top-3)), ((java_cup.runtime.Symbol)CUP$SlpCup$stack.peek()), RESULT);
            }
          return CUP$SlpCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // virtualCall ::= expr DOT ID LP expr_list RP 
            {
              ASTNode RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SlpCup$stack.elementAt(CUP$SlpCup$top-5)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SlpCup$stack.elementAt(CUP$SlpCup$top-5)).right;
		ASTExpr e1 = (ASTExpr)((java_cup.runtime.Symbol) CUP$SlpCup$stack.elementAt(CUP$SlpCup$top-5)).value;
		int i1left = ((java_cup.runtime.Symbol)CUP$SlpCup$stack.elementAt(CUP$SlpCup$top-3)).left;
		int i1right = ((java_cup.runtime.Symbol)CUP$SlpCup$stack.elementAt(CUP$SlpCup$top-3)).right;
		String i1 = (String)((java_cup.runtime.Symbol) CUP$SlpCup$stack.elementAt(CUP$SlpCup$top-3)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$SlpCup$stack.elementAt(CUP$SlpCup$top-1)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$SlpCup$stack.elementAt(CUP$SlpCup$top-1)).right;
		ASTNode e2 = (ASTNode)((java_cup.runtime.Symbol) CUP$SlpCup$stack.elementAt(CUP$SlpCup$top-1)).value;
		 Parser.print_rule("virtualCall -> 'e1.i1(e2)' for i1="+i1); 
              CUP$SlpCup$result = parser.getSymbolFactory().newSymbol("virtualCall",22, ((java_cup.runtime.Symbol)CUP$SlpCup$stack.elementAt(CUP$SlpCup$top-5)), ((java_cup.runtime.Symbol)CUP$SlpCup$stack.peek()), RESULT);
            }
          return CUP$SlpCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // expr_list ::= expr_list COMMA expr 
            {
              ASTNode RESULT =null;

              CUP$SlpCup$result = parser.getSymbolFactory().newSymbol("expr_list",21, ((java_cup.runtime.Symbol)CUP$SlpCup$stack.elementAt(CUP$SlpCup$top-2)), ((java_cup.runtime.Symbol)CUP$SlpCup$stack.peek()), RESULT);
            }
          return CUP$SlpCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // expr_list ::= expr 
            {
              ASTNode RESULT =null;

              CUP$SlpCup$result = parser.getSymbolFactory().newSymbol("expr_list",21, ((java_cup.runtime.Symbol)CUP$SlpCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$SlpCup$stack.peek()), RESULT);
            }
          return CUP$SlpCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // expr_list ::= 
            {
              ASTNode RESULT =null;

              CUP$SlpCup$result = parser.getSymbolFactory().newSymbol("expr_list",21, ((java_cup.runtime.Symbol)CUP$SlpCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$SlpCup$stack.peek()), RESULT);
            }
          return CUP$SlpCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // staticCall ::= CLASS_ID DOT ID LP expr_list RP 
            {
              ASTNode RESULT =null;
		int ci1left = ((java_cup.runtime.Symbol)CUP$SlpCup$stack.elementAt(CUP$SlpCup$top-5)).left;
		int ci1right = ((java_cup.runtime.Symbol)CUP$SlpCup$stack.elementAt(CUP$SlpCup$top-5)).right;
		String ci1 = (String)((java_cup.runtime.Symbol) CUP$SlpCup$stack.elementAt(CUP$SlpCup$top-5)).value;
		int i1left = ((java_cup.runtime.Symbol)CUP$SlpCup$stack.elementAt(CUP$SlpCup$top-3)).left;
		int i1right = ((java_cup.runtime.Symbol)CUP$SlpCup$stack.elementAt(CUP$SlpCup$top-3)).right;
		String i1 = (String)((java_cup.runtime.Symbol) CUP$SlpCup$stack.elementAt(CUP$SlpCup$top-3)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$SlpCup$stack.elementAt(CUP$SlpCup$top-1)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$SlpCup$stack.elementAt(CUP$SlpCup$top-1)).right;
		ASTNode e2 = (ASTNode)((java_cup.runtime.Symbol) CUP$SlpCup$stack.elementAt(CUP$SlpCup$top-1)).value;
		 Parser.print_rule("staticCall -> 'ci1.i1 (e2)' for ci1=" + ci1 + ", i1="+i1); 
              CUP$SlpCup$result = parser.getSymbolFactory().newSymbol("staticCall",20, ((java_cup.runtime.Symbol)CUP$SlpCup$stack.elementAt(CUP$SlpCup$top-5)), ((java_cup.runtime.Symbol)CUP$SlpCup$stack.peek()), RESULT);
            }
          return CUP$SlpCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // call ::= virtualCall 
            {
              ASTNode RESULT =null;
		int vmleft = ((java_cup.runtime.Symbol)CUP$SlpCup$stack.peek()).left;
		int vmright = ((java_cup.runtime.Symbol)CUP$SlpCup$stack.peek()).right;
		ASTNode vm = (ASTNode)((java_cup.runtime.Symbol) CUP$SlpCup$stack.peek()).value;
		 Parser.print_rule("Call -> m1 for vm: " + vm); 
              CUP$SlpCup$result = parser.getSymbolFactory().newSymbol("call",19, ((java_cup.runtime.Symbol)CUP$SlpCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$SlpCup$stack.peek()), RESULT);
            }
          return CUP$SlpCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // call ::= staticCall 
            {
              ASTNode RESULT =null;
		int m1left = ((java_cup.runtime.Symbol)CUP$SlpCup$stack.peek()).left;
		int m1right = ((java_cup.runtime.Symbol)CUP$SlpCup$stack.peek()).right;
		ASTNode m1 = (ASTNode)((java_cup.runtime.Symbol) CUP$SlpCup$stack.peek()).value;
		 Parser.print_rule("Call -> m1 for m1: " + m1); 
              CUP$SlpCup$result = parser.getSymbolFactory().newSymbol("call",19, ((java_cup.runtime.Symbol)CUP$SlpCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$SlpCup$stack.peek()), RESULT);
            }
          return CUP$SlpCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // expr ::= LP expr RP 
            {
              ASTExpr RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SlpCup$stack.elementAt(CUP$SlpCup$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SlpCup$stack.elementAt(CUP$SlpCup$top-1)).right;
		ASTExpr e = (ASTExpr)((java_cup.runtime.Symbol) CUP$SlpCup$stack.elementAt(CUP$SlpCup$top-1)).value;
		 RESULT = new ASTVarExpr("");
		
              CUP$SlpCup$result = parser.getSymbolFactory().newSymbol("expr",0, ((java_cup.runtime.Symbol)CUP$SlpCup$stack.elementAt(CUP$SlpCup$top-2)), ((java_cup.runtime.Symbol)CUP$SlpCup$stack.peek()), RESULT);
            }
          return CUP$SlpCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // expr ::= literal 
            {
              ASTExpr RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$SlpCup$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$SlpCup$stack.peek()).right;
		ASTNode l = (ASTNode)((java_cup.runtime.Symbol) CUP$SlpCup$stack.peek()).value;
		 RESULT = new ASTVarExpr("");
		
              CUP$SlpCup$result = parser.getSymbolFactory().newSymbol("expr",0, ((java_cup.runtime.Symbol)CUP$SlpCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$SlpCup$stack.peek()), RESULT);
            }
          return CUP$SlpCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // expr ::= unop expr 
            {
              ASTExpr RESULT =null;
		int uleft = ((java_cup.runtime.Symbol)CUP$SlpCup$stack.elementAt(CUP$SlpCup$top-1)).left;
		int uright = ((java_cup.runtime.Symbol)CUP$SlpCup$stack.elementAt(CUP$SlpCup$top-1)).right;
		Operator u = (Operator)((java_cup.runtime.Symbol) CUP$SlpCup$stack.elementAt(CUP$SlpCup$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SlpCup$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SlpCup$stack.peek()).right;
		ASTExpr e = (ASTExpr)((java_cup.runtime.Symbol) CUP$SlpCup$stack.peek()).value;
		 RESULT = new ASTUnaryOpExpr(e,u);
		
              CUP$SlpCup$result = parser.getSymbolFactory().newSymbol("expr",0, ((java_cup.runtime.Symbol)CUP$SlpCup$stack.elementAt(CUP$SlpCup$top-1)), ((java_cup.runtime.Symbol)CUP$SlpCup$stack.peek()), RESULT);
            }
          return CUP$SlpCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // expr ::= expr binop expr 
            {
              ASTExpr RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SlpCup$stack.elementAt(CUP$SlpCup$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SlpCup$stack.elementAt(CUP$SlpCup$top-2)).right;
		ASTExpr e1 = (ASTExpr)((java_cup.runtime.Symbol) CUP$SlpCup$stack.elementAt(CUP$SlpCup$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SlpCup$stack.elementAt(CUP$SlpCup$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SlpCup$stack.elementAt(CUP$SlpCup$top-1)).right;
		Operator b = (Operator)((java_cup.runtime.Symbol) CUP$SlpCup$stack.elementAt(CUP$SlpCup$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$SlpCup$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$SlpCup$stack.peek()).right;
		ASTExpr e2 = (ASTExpr)((java_cup.runtime.Symbol) CUP$SlpCup$stack.peek()).value;
		 RESULT = new ASTBinaryOpExpr(e1, e2, b);
		
              CUP$SlpCup$result = parser.getSymbolFactory().newSymbol("expr",0, ((java_cup.runtime.Symbol)CUP$SlpCup$stack.elementAt(CUP$SlpCup$top-2)), ((java_cup.runtime.Symbol)CUP$SlpCup$stack.peek()), RESULT);
            }
          return CUP$SlpCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // expr ::= expr DOT LENGTH 
            {
              ASTExpr RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SlpCup$stack.elementAt(CUP$SlpCup$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SlpCup$stack.elementAt(CUP$SlpCup$top-2)).right;
		ASTExpr e1 = (ASTExpr)((java_cup.runtime.Symbol) CUP$SlpCup$stack.elementAt(CUP$SlpCup$top-2)).value;
		  RESULT = new ASTVarExpr("");
		
              CUP$SlpCup$result = parser.getSymbolFactory().newSymbol("expr",0, ((java_cup.runtime.Symbol)CUP$SlpCup$stack.elementAt(CUP$SlpCup$top-2)), ((java_cup.runtime.Symbol)CUP$SlpCup$stack.peek()), RESULT);
            }
          return CUP$SlpCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // expr ::= NEW type LB expr RB 
            {
              ASTExpr RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$SlpCup$stack.elementAt(CUP$SlpCup$top-3)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$SlpCup$stack.elementAt(CUP$SlpCup$top-3)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$SlpCup$stack.elementAt(CUP$SlpCup$top-3)).value;
		  RESULT = new ASTVarExpr("");
		
              CUP$SlpCup$result = parser.getSymbolFactory().newSymbol("expr",0, ((java_cup.runtime.Symbol)CUP$SlpCup$stack.elementAt(CUP$SlpCup$top-4)), ((java_cup.runtime.Symbol)CUP$SlpCup$stack.peek()), RESULT);
            }
          return CUP$SlpCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // expr ::= NEW CLASS_ID LP RP 
            {
              ASTExpr RESULT =null;
		int cidleft = ((java_cup.runtime.Symbol)CUP$SlpCup$stack.elementAt(CUP$SlpCup$top-2)).left;
		int cidright = ((java_cup.runtime.Symbol)CUP$SlpCup$stack.elementAt(CUP$SlpCup$top-2)).right;
		String cid = (String)((java_cup.runtime.Symbol) CUP$SlpCup$stack.elementAt(CUP$SlpCup$top-2)).value;
		 RESULT = new ASTVarExpr("");
		
              CUP$SlpCup$result = parser.getSymbolFactory().newSymbol("expr",0, ((java_cup.runtime.Symbol)CUP$SlpCup$stack.elementAt(CUP$SlpCup$top-3)), ((java_cup.runtime.Symbol)CUP$SlpCup$stack.peek()), RESULT);
            }
          return CUP$SlpCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // expr ::= THIS 
            {
              ASTExpr RESULT =null;
		 RESULT = new ASTVarExpr(Keyword.THIS.toString());
		
              CUP$SlpCup$result = parser.getSymbolFactory().newSymbol("expr",0, ((java_cup.runtime.Symbol)CUP$SlpCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$SlpCup$stack.peek()), RESULT);
            }
          return CUP$SlpCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // expr ::= call 
            {
              ASTExpr RESULT =null;
		int c1left = ((java_cup.runtime.Symbol)CUP$SlpCup$stack.peek()).left;
		int c1right = ((java_cup.runtime.Symbol)CUP$SlpCup$stack.peek()).right;
		ASTNode c1 = (ASTNode)((java_cup.runtime.Symbol) CUP$SlpCup$stack.peek()).value;
		 RESULT = new ASTVarExpr("");
		/*RESULT = new Call(c1);*/
		
              CUP$SlpCup$result = parser.getSymbolFactory().newSymbol("expr",0, ((java_cup.runtime.Symbol)CUP$SlpCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$SlpCup$stack.peek()), RESULT);
            }
          return CUP$SlpCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // expr ::= location 
            {
              ASTExpr RESULT =null;
		 RESULT = new ASTVarExpr("");
		
              CUP$SlpCup$result = parser.getSymbolFactory().newSymbol("expr",0, ((java_cup.runtime.Symbol)CUP$SlpCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$SlpCup$stack.peek()), RESULT);
            }
          return CUP$SlpCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // maby_expr ::= expr 
            {
              ASTNode RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SlpCup$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SlpCup$stack.peek()).right;
		ASTExpr e1 = (ASTExpr)((java_cup.runtime.Symbol) CUP$SlpCup$stack.peek()).value;

              CUP$SlpCup$result = parser.getSymbolFactory().newSymbol("maby_expr",16, ((java_cup.runtime.Symbol)CUP$SlpCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$SlpCup$stack.peek()), RESULT);
            }
          return CUP$SlpCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // maby_expr ::= 
            {
              ASTNode RESULT =null;

              CUP$SlpCup$result = parser.getSymbolFactory().newSymbol("maby_expr",16, ((java_cup.runtime.Symbol)CUP$SlpCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$SlpCup$stack.peek()), RESULT);
            }
          return CUP$SlpCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // assign_exp ::= ASSIGN expr 
            {
              ASTNode RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SlpCup$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SlpCup$stack.peek()).right;
		ASTExpr e1 = (ASTExpr)((java_cup.runtime.Symbol) CUP$SlpCup$stack.peek()).value;
		 Parser.print_rule("assign_exp-> '=e1' for e1="+e1); 
              CUP$SlpCup$result = parser.getSymbolFactory().newSymbol("assign_exp",26, ((java_cup.runtime.Symbol)CUP$SlpCup$stack.elementAt(CUP$SlpCup$top-1)), ((java_cup.runtime.Symbol)CUP$SlpCup$stack.peek()), RESULT);
            }
          return CUP$SlpCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // assign_exp ::= 
            {
              ASTNode RESULT =null;

              CUP$SlpCup$result = parser.getSymbolFactory().newSymbol("assign_exp",26, ((java_cup.runtime.Symbol)CUP$SlpCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$SlpCup$stack.peek()), RESULT);
            }
          return CUP$SlpCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // else_stmnt ::= ELSE stmt 
            {
              ASTNode RESULT =null;
		 Parser.print_rule("else statement");
              CUP$SlpCup$result = parser.getSymbolFactory().newSymbol("else_stmnt",25, ((java_cup.runtime.Symbol)CUP$SlpCup$stack.elementAt(CUP$SlpCup$top-1)), ((java_cup.runtime.Symbol)CUP$SlpCup$stack.peek()), RESULT);
            }
          return CUP$SlpCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // else_stmnt ::= 
            {
              ASTNode RESULT =null;

              CUP$SlpCup$result = parser.getSymbolFactory().newSymbol("else_stmnt",25, ((java_cup.runtime.Symbol)CUP$SlpCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$SlpCup$stack.peek()), RESULT);
            }
          return CUP$SlpCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // stmt ::= type ID assign_exp SEMI 
            {
              ASTStmt RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$SlpCup$stack.elementAt(CUP$SlpCup$top-3)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$SlpCup$stack.elementAt(CUP$SlpCup$top-3)).right;
		String t1 = (String)((java_cup.runtime.Symbol) CUP$SlpCup$stack.elementAt(CUP$SlpCup$top-3)).value;
		int i1left = ((java_cup.runtime.Symbol)CUP$SlpCup$stack.elementAt(CUP$SlpCup$top-2)).left;
		int i1right = ((java_cup.runtime.Symbol)CUP$SlpCup$stack.elementAt(CUP$SlpCup$top-2)).right;
		String i1 = (String)((java_cup.runtime.Symbol) CUP$SlpCup$stack.elementAt(CUP$SlpCup$top-2)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$SlpCup$stack.elementAt(CUP$SlpCup$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SlpCup$stack.elementAt(CUP$SlpCup$top-1)).right;
		ASTNode e1 = (ASTNode)((java_cup.runtime.Symbol) CUP$SlpCup$stack.elementAt(CUP$SlpCup$top-1)).value;
		 ASTFormalist.Formal f1 = new ASTFormalList(t1, i1);
	   RESULT = new ASTAssignFormals(f1,e1);
	 Parser.print_rule("stmt -> t1 i1 = e1  for t1: " + t1 + ", i1: " + i1 + ", e1: " + e1);
              CUP$SlpCup$result = parser.getSymbolFactory().newSymbol("stmt",1, ((java_cup.runtime.Symbol)CUP$SlpCup$stack.elementAt(CUP$SlpCup$top-3)), ((java_cup.runtime.Symbol)CUP$SlpCup$stack.peek()), RESULT);
            }
          return CUP$SlpCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // stmt ::= LCBR stmt_list RCBR 
            {
              ASTStmt RESULT =null;
		int stleft = ((java_cup.runtime.Symbol)CUP$SlpCup$stack.elementAt(CUP$SlpCup$top-1)).left;
		int stright = ((java_cup.runtime.Symbol)CUP$SlpCup$stack.elementAt(CUP$SlpCup$top-1)).right;
		ASTStmtList st = (ASTStmtList)((java_cup.runtime.Symbol) CUP$SlpCup$stack.elementAt(CUP$SlpCup$top-1)).value;
		RESULT = st;
              CUP$SlpCup$result = parser.getSymbolFactory().newSymbol("stmt",1, ((java_cup.runtime.Symbol)CUP$SlpCup$stack.elementAt(CUP$SlpCup$top-2)), ((java_cup.runtime.Symbol)CUP$SlpCup$stack.peek()), RESULT);
            }
          return CUP$SlpCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // stmt ::= CONTINUE SEMI 
            {
              ASTStmt RESULT =null;
		 RESULT = new ASTVarExpr(Keyword.CONTINUE.toString());
		Parser.print_rule("stmt -> 'continue;'");
              CUP$SlpCup$result = parser.getSymbolFactory().newSymbol("stmt",1, ((java_cup.runtime.Symbol)CUP$SlpCup$stack.elementAt(CUP$SlpCup$top-1)), ((java_cup.runtime.Symbol)CUP$SlpCup$stack.peek()), RESULT);
            }
          return CUP$SlpCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // stmt ::= BREAK SEMI 
            {
              ASTStmt RESULT =null;
		 RESULT = new ASTVarExpr(Keyword.BREAK.toString());
		Parser.print_rule("stmt -> 'break;'");
              CUP$SlpCup$result = parser.getSymbolFactory().newSymbol("stmt",1, ((java_cup.runtime.Symbol)CUP$SlpCup$stack.elementAt(CUP$SlpCup$top-1)), ((java_cup.runtime.Symbol)CUP$SlpCup$stack.peek()), RESULT);
            }
          return CUP$SlpCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // stmt ::= WHILE LP expr RP stmt 
            {
              ASTStmt RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SlpCup$stack.elementAt(CUP$SlpCup$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SlpCup$stack.elementAt(CUP$SlpCup$top-2)).right;
		ASTExpr e1 = (ASTExpr)((java_cup.runtime.Symbol) CUP$SlpCup$stack.elementAt(CUP$SlpCup$top-2)).value;
		int s1left = ((java_cup.runtime.Symbol)CUP$SlpCup$stack.peek()).left;
		int s1right = ((java_cup.runtime.Symbol)CUP$SlpCup$stack.peek()).right;
		ASTStmt s1 = (ASTStmt)((java_cup.runtime.Symbol) CUP$SlpCup$stack.peek()).value;
		  RESULT = new ASTWhileStmt(e1,s1);
		Parser.print_rule("stmt -> 'while e1' for: " + e1);
              CUP$SlpCup$result = parser.getSymbolFactory().newSymbol("stmt",1, ((java_cup.runtime.Symbol)CUP$SlpCup$stack.elementAt(CUP$SlpCup$top-4)), ((java_cup.runtime.Symbol)CUP$SlpCup$stack.peek()), RESULT);
            }
          return CUP$SlpCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // stmt ::= IF LP expr RP stmt else_stmnt 
            {
              ASTStmt RESULT =null;
		int ex1left = ((java_cup.runtime.Symbol)CUP$SlpCup$stack.elementAt(CUP$SlpCup$top-3)).left;
		int ex1right = ((java_cup.runtime.Symbol)CUP$SlpCup$stack.elementAt(CUP$SlpCup$top-3)).right;
		ASTExpr ex1 = (ASTExpr)((java_cup.runtime.Symbol) CUP$SlpCup$stack.elementAt(CUP$SlpCup$top-3)).value;
		int s1left = ((java_cup.runtime.Symbol)CUP$SlpCup$stack.elementAt(CUP$SlpCup$top-1)).left;
		int s1right = ((java_cup.runtime.Symbol)CUP$SlpCup$stack.elementAt(CUP$SlpCup$top-1)).right;
		ASTStmt s1 = (ASTStmt)((java_cup.runtime.Symbol) CUP$SlpCup$stack.elementAt(CUP$SlpCup$top-1)).value;
		int el1left = ((java_cup.runtime.Symbol)CUP$SlpCup$stack.peek()).left;
		int el1right = ((java_cup.runtime.Symbol)CUP$SlpCup$stack.peek()).right;
		ASTNode el1 = (ASTNode)((java_cup.runtime.Symbol) CUP$SlpCup$stack.peek()).value;
		 RESULT = new ASTIfElseStmt(ex1, s1, el1); 
	 	Parser.print_rule("stmt -> 'if e1' for: " + e1);
              CUP$SlpCup$result = parser.getSymbolFactory().newSymbol("stmt",1, ((java_cup.runtime.Symbol)CUP$SlpCup$stack.elementAt(CUP$SlpCup$top-5)), ((java_cup.runtime.Symbol)CUP$SlpCup$stack.peek()), RESULT);
            }
          return CUP$SlpCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // stmt ::= RETURN maby_expr SEMI 
            {
              ASTStmt RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SlpCup$stack.elementAt(CUP$SlpCup$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SlpCup$stack.elementAt(CUP$SlpCup$top-1)).right;
		ASTNode e1 = (ASTNode)((java_cup.runtime.Symbol) CUP$SlpCup$stack.elementAt(CUP$SlpCup$top-1)).value;
		RESULT = new ASTRetExp(e1); 
	Parser.print_rule("stmt -> 'return e1' for: " + e1);
              CUP$SlpCup$result = parser.getSymbolFactory().newSymbol("stmt",1, ((java_cup.runtime.Symbol)CUP$SlpCup$stack.elementAt(CUP$SlpCup$top-2)), ((java_cup.runtime.Symbol)CUP$SlpCup$stack.peek()), RESULT);
            }
          return CUP$SlpCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // stmt ::= call SEMI 
            {
              ASTStmt RESULT =null;
		int clleft = ((java_cup.runtime.Symbol)CUP$SlpCup$stack.elementAt(CUP$SlpCup$top-1)).left;
		int clright = ((java_cup.runtime.Symbol)CUP$SlpCup$stack.elementAt(CUP$SlpCup$top-1)).right;
		ASTNode cl = (ASTNode)((java_cup.runtime.Symbol) CUP$SlpCup$stack.elementAt(CUP$SlpCup$top-1)).value;
		 RESULT = cl;
	Parser.print_rule("stmt -> 'v=e;' for v: " + v + "and e :" + e); 
              CUP$SlpCup$result = parser.getSymbolFactory().newSymbol("stmt",1, ((java_cup.runtime.Symbol)CUP$SlpCup$stack.elementAt(CUP$SlpCup$top-1)), ((java_cup.runtime.Symbol)CUP$SlpCup$stack.peek()), RESULT);
            }
          return CUP$SlpCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // stmt ::= location ASSIGN expr SEMI 
            {
              ASTStmt RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$SlpCup$stack.elementAt(CUP$SlpCup$top-3)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$SlpCup$stack.elementAt(CUP$SlpCup$top-3)).right;
		ASTNode v = (ASTNode)((java_cup.runtime.Symbol) CUP$SlpCup$stack.elementAt(CUP$SlpCup$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SlpCup$stack.elementAt(CUP$SlpCup$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SlpCup$stack.elementAt(CUP$SlpCup$top-1)).right;
		ASTExpr e = (ASTExpr)((java_cup.runtime.Symbol) CUP$SlpCup$stack.elementAt(CUP$SlpCup$top-1)).value;
		 RESULT = new ASTAssignStmt(ve, e);
	Parser.print_rule("stmt -> 'v=e;' for v: " + v + "and e :" + e); 
              CUP$SlpCup$result = parser.getSymbolFactory().newSymbol("stmt",1, ((java_cup.runtime.Symbol)CUP$SlpCup$stack.elementAt(CUP$SlpCup$top-3)), ((java_cup.runtime.Symbol)CUP$SlpCup$stack.peek()), RESULT);
            }
          return CUP$SlpCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // stmt_list ::= stmt_list stmt 
            {
              ASTStmtList RESULT =null;
		int slleft = ((java_cup.runtime.Symbol)CUP$SlpCup$stack.elementAt(CUP$SlpCup$top-1)).left;
		int slright = ((java_cup.runtime.Symbol)CUP$SlpCup$stack.elementAt(CUP$SlpCup$top-1)).right;
		ASTStmtList sl = (ASTStmtList)((java_cup.runtime.Symbol) CUP$SlpCup$stack.elementAt(CUP$SlpCup$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$SlpCup$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$SlpCup$stack.peek()).right;
		ASTStmt s = (ASTStmt)((java_cup.runtime.Symbol) CUP$SlpCup$stack.peek()).value;
		 sl.addNode(s); RESULT = sl 
	 /*sl.addStmt(s); RESULT = sl; */
              CUP$SlpCup$result = parser.getSymbolFactory().newSymbol("stmt_list",4, ((java_cup.runtime.Symbol)CUP$SlpCup$stack.elementAt(CUP$SlpCup$top-1)), ((java_cup.runtime.Symbol)CUP$SlpCup$stack.peek()), RESULT);
            }
          return CUP$SlpCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // stmt_list ::= 
            {
              ASTStmtList RESULT =null;
		RESULT = new ASTStmtList()  
              CUP$SlpCup$result = parser.getSymbolFactory().newSymbol("stmt_list",4, ((java_cup.runtime.Symbol)CUP$SlpCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$SlpCup$stack.peek()), RESULT);
            }
          return CUP$SlpCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // formals ::= type ID COMMA formals 
            {
              ASTFormalList RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$SlpCup$stack.elementAt(CUP$SlpCup$top-3)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$SlpCup$stack.elementAt(CUP$SlpCup$top-3)).right;
		String t1 = (String)((java_cup.runtime.Symbol) CUP$SlpCup$stack.elementAt(CUP$SlpCup$top-3)).value;
		int i1left = ((java_cup.runtime.Symbol)CUP$SlpCup$stack.elementAt(CUP$SlpCup$top-2)).left;
		int i1right = ((java_cup.runtime.Symbol)CUP$SlpCup$stack.elementAt(CUP$SlpCup$top-2)).right;
		String i1 = (String)((java_cup.runtime.Symbol) CUP$SlpCup$stack.elementAt(CUP$SlpCup$top-2)).value;
		int fl1left = ((java_cup.runtime.Symbol)CUP$SlpCup$stack.peek()).left;
		int fl1right = ((java_cup.runtime.Symbol)CUP$SlpCup$stack.peek()).right;
		ASTFormalList fl1 = (ASTFormalList)((java_cup.runtime.Symbol) CUP$SlpCup$stack.peek()).value;
		 fl1.addNode(t1, i1); RESULT = fl1;
		Parser.print_rule("formals-> 't1 i1, fl1' for t1="+t1+" and i1="+i1+" and fl1="+fl1); 
              CUP$SlpCup$result = parser.getSymbolFactory().newSymbol("formals",7, ((java_cup.runtime.Symbol)CUP$SlpCup$stack.elementAt(CUP$SlpCup$top-3)), ((java_cup.runtime.Symbol)CUP$SlpCup$stack.peek()), RESULT);
            }
          return CUP$SlpCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // formals ::= type ID 
            {
              ASTFormalList RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$SlpCup$stack.elementAt(CUP$SlpCup$top-1)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$SlpCup$stack.elementAt(CUP$SlpCup$top-1)).right;
		String t1 = (String)((java_cup.runtime.Symbol) CUP$SlpCup$stack.elementAt(CUP$SlpCup$top-1)).value;
		int i1left = ((java_cup.runtime.Symbol)CUP$SlpCup$stack.peek()).left;
		int i1right = ((java_cup.runtime.Symbol)CUP$SlpCup$stack.peek()).right;
		String i1 = (String)((java_cup.runtime.Symbol) CUP$SlpCup$stack.peek()).value;
		  RESULT = new ASTFormalList(t1, i1); 
		Parser.print_rule("formals-> 't1 i1' for t1="+t1+" and i1="+i1); 
              CUP$SlpCup$result = parser.getSymbolFactory().newSymbol("formals",7, ((java_cup.runtime.Symbol)CUP$SlpCup$stack.elementAt(CUP$SlpCup$top-1)), ((java_cup.runtime.Symbol)CUP$SlpCup$stack.peek()), RESULT);
            }
          return CUP$SlpCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // maybe_formals ::= formals 
            {
              ASTFormalList RESULT =null;
		int fl1left = ((java_cup.runtime.Symbol)CUP$SlpCup$stack.peek()).left;
		int fl1right = ((java_cup.runtime.Symbol)CUP$SlpCup$stack.peek()).right;
		ASTFormalList fl1 = (ASTFormalList)((java_cup.runtime.Symbol) CUP$SlpCup$stack.peek()).value;
		 RESULT = fl1;
		  Parser.print_rule("maybe_formals-> 'fl1' for fl1=" + fl1); 
              CUP$SlpCup$result = parser.getSymbolFactory().newSymbol("maybe_formals",8, ((java_cup.runtime.Symbol)CUP$SlpCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$SlpCup$stack.peek()), RESULT);
            }
          return CUP$SlpCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // maybe_formals ::= 
            {
              ASTFormalList RESULT =null;
		 RESULT = new ASTFormalList();
		Parser.print_rule("maybe_formals-> ''"); 
              CUP$SlpCup$result = parser.getSymbolFactory().newSymbol("maybe_formals",8, ((java_cup.runtime.Symbol)CUP$SlpCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$SlpCup$stack.peek()), RESULT);
            }
          return CUP$SlpCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // type ::= type LB RB 
            {
              String RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$SlpCup$stack.elementAt(CUP$SlpCup$top-2)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$SlpCup$stack.elementAt(CUP$SlpCup$top-2)).right;
		String t1 = (String)((java_cup.runtime.Symbol) CUP$SlpCup$stack.elementAt(CUP$SlpCup$top-2)).value;
		 RESULT = t1 + "[]";
		Parser.print_rule("type-> 't1[]' for t1="+t1); 
              CUP$SlpCup$result = parser.getSymbolFactory().newSymbol("type",14, ((java_cup.runtime.Symbol)CUP$SlpCup$stack.elementAt(CUP$SlpCup$top-2)), ((java_cup.runtime.Symbol)CUP$SlpCup$stack.peek()), RESULT);
            }
          return CUP$SlpCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // type ::= CLASS_ID 
            {
              String RESULT =null;
		int c1left = ((java_cup.runtime.Symbol)CUP$SlpCup$stack.peek()).left;
		int c1right = ((java_cup.runtime.Symbol)CUP$SlpCup$stack.peek()).right;
		String c1 = (String)((java_cup.runtime.Symbol) CUP$SlpCup$stack.peek()).value;
		 RESULT = c1;
		Parser.print_rule("type-> 'c1' for c1="+c1); 
              CUP$SlpCup$result = parser.getSymbolFactory().newSymbol("type",14, ((java_cup.runtime.Symbol)CUP$SlpCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$SlpCup$stack.peek()), RESULT);
            }
          return CUP$SlpCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // type ::= STRING 
            {
              String RESULT =null;
		 RESULT = Keyword.STRING.toString();
		Parser.print_rule("type-> 'STRING'"); 
              CUP$SlpCup$result = parser.getSymbolFactory().newSymbol("type",14, ((java_cup.runtime.Symbol)CUP$SlpCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$SlpCup$stack.peek()), RESULT);
            }
          return CUP$SlpCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // type ::= BOOLEAN 
            {
              String RESULT =null;
		 RESULT = Keyword.BOOLEAN.toString();
		Parser.print_rule("type-> 'BOOLEAN'"); 
              CUP$SlpCup$result = parser.getSymbolFactory().newSymbol("type",14, ((java_cup.runtime.Symbol)CUP$SlpCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$SlpCup$stack.peek()), RESULT);
            }
          return CUP$SlpCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // type ::= INT 
            {
              String RESULT =null;
		 RESULT = Keyword.INT.toString();
		Parser.print_rule("type-> 'INT'"); 
              CUP$SlpCup$result = parser.getSymbolFactory().newSymbol("type",14, ((java_cup.runtime.Symbol)CUP$SlpCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$SlpCup$stack.peek()), RESULT);
            }
          return CUP$SlpCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // stat_type_void ::= VOID ID 
            {
              ASTStatType RESULT =null;
		int i1left = ((java_cup.runtime.Symbol)CUP$SlpCup$stack.peek()).left;
		int i1right = ((java_cup.runtime.Symbol)CUP$SlpCup$stack.peek()).right;
		String i1 = (String)((java_cup.runtime.Symbol) CUP$SlpCup$stack.peek()).value;
		 RESULT = new ASTStatType(false, Keyword.VOID.toString(), i1); 
		Parser.print_rule("stat_type_void-> 'void i1' for i1="+i1); 
              CUP$SlpCup$result = parser.getSymbolFactory().newSymbol("stat_type_void",13, ((java_cup.runtime.Symbol)CUP$SlpCup$stack.elementAt(CUP$SlpCup$top-1)), ((java_cup.runtime.Symbol)CUP$SlpCup$stack.peek()), RESULT);
            }
          return CUP$SlpCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // stat_type_void ::= STATIC VOID ID 
            {
              ASTStatType RESULT =null;
		int i1left = ((java_cup.runtime.Symbol)CUP$SlpCup$stack.peek()).left;
		int i1right = ((java_cup.runtime.Symbol)CUP$SlpCup$stack.peek()).right;
		String i1 = (String)((java_cup.runtime.Symbol) CUP$SlpCup$stack.peek()).value;
		 RESULT = new ASTStatType(true, Keyword.VOID.toString(), i1); 
		Parser.print_rule("stat_type_void-> 'static void i1' for i1="+i1); 
              CUP$SlpCup$result = parser.getSymbolFactory().newSymbol("stat_type_void",13, ((java_cup.runtime.Symbol)CUP$SlpCup$stack.elementAt(CUP$SlpCup$top-2)), ((java_cup.runtime.Symbol)CUP$SlpCup$stack.peek()), RESULT);
            }
          return CUP$SlpCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // stat_type_void ::= type ID 
            {
              ASTStatType RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$SlpCup$stack.elementAt(CUP$SlpCup$top-1)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$SlpCup$stack.elementAt(CUP$SlpCup$top-1)).right;
		String t1 = (String)((java_cup.runtime.Symbol) CUP$SlpCup$stack.elementAt(CUP$SlpCup$top-1)).value;
		int i1left = ((java_cup.runtime.Symbol)CUP$SlpCup$stack.peek()).left;
		int i1right = ((java_cup.runtime.Symbol)CUP$SlpCup$stack.peek()).right;
		String i1 = (String)((java_cup.runtime.Symbol) CUP$SlpCup$stack.peek()).value;
		RESULT = new ASTStatType(false, t1, i1); 
		Parser.print_rule("stat_type_void-> 't1 i1' for t1="+t1+" and i1="+i1); 
              CUP$SlpCup$result = parser.getSymbolFactory().newSymbol("stat_type_void",13, ((java_cup.runtime.Symbol)CUP$SlpCup$stack.elementAt(CUP$SlpCup$top-1)), ((java_cup.runtime.Symbol)CUP$SlpCup$stack.peek()), RESULT);
            }
          return CUP$SlpCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // stat_type_void ::= STATIC type ID 
            {
              ASTStatType RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$SlpCup$stack.elementAt(CUP$SlpCup$top-1)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$SlpCup$stack.elementAt(CUP$SlpCup$top-1)).right;
		String t1 = (String)((java_cup.runtime.Symbol) CUP$SlpCup$stack.elementAt(CUP$SlpCup$top-1)).value;
		int i1left = ((java_cup.runtime.Symbol)CUP$SlpCup$stack.peek()).left;
		int i1right = ((java_cup.runtime.Symbol)CUP$SlpCup$stack.peek()).right;
		String i1 = (String)((java_cup.runtime.Symbol) CUP$SlpCup$stack.peek()).value;
		 RESULT = new ASTStatType(true, t1, i1); 
		Parser.print_rule("stat_type_void-> 'static t1 i1' for t1="+t1+" and i1="+i1); 
              CUP$SlpCup$result = parser.getSymbolFactory().newSymbol("stat_type_void",13, ((java_cup.runtime.Symbol)CUP$SlpCup$stack.elementAt(CUP$SlpCup$top-2)), ((java_cup.runtime.Symbol)CUP$SlpCup$stack.peek()), RESULT);
            }
          return CUP$SlpCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // method ::= stat_type_void LP maybe_formals RP LCBR stmt_list RCBR 
            {
              ASTNode RESULT =null;
		int st1left = ((java_cup.runtime.Symbol)CUP$SlpCup$stack.elementAt(CUP$SlpCup$top-6)).left;
		int st1right = ((java_cup.runtime.Symbol)CUP$SlpCup$stack.elementAt(CUP$SlpCup$top-6)).right;
		ASTStatType st1 = (ASTStatType)((java_cup.runtime.Symbol) CUP$SlpCup$stack.elementAt(CUP$SlpCup$top-6)).value;
		int mf1left = ((java_cup.runtime.Symbol)CUP$SlpCup$stack.elementAt(CUP$SlpCup$top-4)).left;
		int mf1right = ((java_cup.runtime.Symbol)CUP$SlpCup$stack.elementAt(CUP$SlpCup$top-4)).right;
		ASTFormalList mf1 = (ASTFormalList)((java_cup.runtime.Symbol) CUP$SlpCup$stack.elementAt(CUP$SlpCup$top-4)).value;
		int sl1left = ((java_cup.runtime.Symbol)CUP$SlpCup$stack.elementAt(CUP$SlpCup$top-1)).left;
		int sl1right = ((java_cup.runtime.Symbol)CUP$SlpCup$stack.elementAt(CUP$SlpCup$top-1)).right;
		ASTStmtList sl1 = (ASTStmtList)((java_cup.runtime.Symbol) CUP$SlpCup$stack.elementAt(CUP$SlpCup$top-1)).value;
		 RESULT = new ASTMethod(st1.isStatic, st1.type, st1.id, mf1, sl1); 
		Parser.print_rule("stat_type_void-> 'st1 (maybe_formals) {stmt_list}' for st1="+st1); 
              CUP$SlpCup$result = parser.getSymbolFactory().newSymbol("method",15, ((java_cup.runtime.Symbol)CUP$SlpCup$stack.elementAt(CUP$SlpCup$top-6)), ((java_cup.runtime.Symbol)CUP$SlpCup$stack.peek()), RESULT);
            }
          return CUP$SlpCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // id_list ::= id_list COMMA ID 
            {
              ASTIdList RESULT =null;
		int is1left = ((java_cup.runtime.Symbol)CUP$SlpCup$stack.elementAt(CUP$SlpCup$top-2)).left;
		int is1right = ((java_cup.runtime.Symbol)CUP$SlpCup$stack.elementAt(CUP$SlpCup$top-2)).right;
		ASTIdList is1 = (ASTIdList)((java_cup.runtime.Symbol) CUP$SlpCup$stack.elementAt(CUP$SlpCup$top-2)).value;
		int i1left = ((java_cup.runtime.Symbol)CUP$SlpCup$stack.peek()).left;
		int i1right = ((java_cup.runtime.Symbol)CUP$SlpCup$stack.peek()).right;
		String i1 = (String)((java_cup.runtime.Symbol) CUP$SlpCup$stack.peek()).value;
		 is1.addNode(i1); RESULT = is1 ;
		Parser.print_rule("id_list-> 'is1, i1' for is1=" + is1 + ", i1="+i1); 
              CUP$SlpCup$result = parser.getSymbolFactory().newSymbol("id_list",11, ((java_cup.runtime.Symbol)CUP$SlpCup$stack.elementAt(CUP$SlpCup$top-2)), ((java_cup.runtime.Symbol)CUP$SlpCup$stack.peek()), RESULT);
            }
          return CUP$SlpCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // id_list ::= ID 
            {
              ASTIdList RESULT =null;
		int i1left = ((java_cup.runtime.Symbol)CUP$SlpCup$stack.peek()).left;
		int i1right = ((java_cup.runtime.Symbol)CUP$SlpCup$stack.peek()).right;
		String i1 = (String)((java_cup.runtime.Symbol) CUP$SlpCup$stack.peek()).value;
		 RESULT = new ASTIdList(i1);
		Parser.print_rule("id_list-> 'i1' for i1="+i1); 
              CUP$SlpCup$result = parser.getSymbolFactory().newSymbol("id_list",11, ((java_cup.runtime.Symbol)CUP$SlpCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$SlpCup$stack.peek()), RESULT);
            }
          return CUP$SlpCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // field ::= type id_list SEMI 
            {
              ASTNode RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$SlpCup$stack.elementAt(CUP$SlpCup$top-2)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$SlpCup$stack.elementAt(CUP$SlpCup$top-2)).right;
		String t1 = (String)((java_cup.runtime.Symbol) CUP$SlpCup$stack.elementAt(CUP$SlpCup$top-2)).value;
		int is1left = ((java_cup.runtime.Symbol)CUP$SlpCup$stack.elementAt(CUP$SlpCup$top-1)).left;
		int is1right = ((java_cup.runtime.Symbol)CUP$SlpCup$stack.elementAt(CUP$SlpCup$top-1)).right;
		ASTIdList is1 = (ASTIdList)((java_cup.runtime.Symbol) CUP$SlpCup$stack.elementAt(CUP$SlpCup$top-1)).value;
		 RESULT = new ASTField(t1, is1);
		Parser.print_rule("field-> 't1 is1;' for t1=" + t1 + ", is1="+is1); 
              CUP$SlpCup$result = parser.getSymbolFactory().newSymbol("field",18, ((java_cup.runtime.Symbol)CUP$SlpCup$stack.elementAt(CUP$SlpCup$top-2)), ((java_cup.runtime.Symbol)CUP$SlpCup$stack.peek()), RESULT);
            }
          return CUP$SlpCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // field_meth ::= method 
            {
              ASTNode RESULT =null;
		int m1left = ((java_cup.runtime.Symbol)CUP$SlpCup$stack.peek()).left;
		int m1right = ((java_cup.runtime.Symbol)CUP$SlpCup$stack.peek()).right;
		ASTNode m1 = (ASTNode)((java_cup.runtime.Symbol) CUP$SlpCup$stack.peek()).value;
		 RESULT = m1;
		Parser.print_rule("field_meth-> 'method'"); 
              CUP$SlpCup$result = parser.getSymbolFactory().newSymbol("field_meth",17, ((java_cup.runtime.Symbol)CUP$SlpCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$SlpCup$stack.peek()), RESULT);
            }
          return CUP$SlpCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // field_meth ::= field 
            {
              ASTNode RESULT =null;
		int f1left = ((java_cup.runtime.Symbol)CUP$SlpCup$stack.peek()).left;
		int f1right = ((java_cup.runtime.Symbol)CUP$SlpCup$stack.peek()).right;
		ASTNode f1 = (ASTNode)((java_cup.runtime.Symbol) CUP$SlpCup$stack.peek()).value;
		 RESULT = f1;
		Parser.print_rule("field_meth-> 'field'"); 
              CUP$SlpCup$result = parser.getSymbolFactory().newSymbol("field_meth",17, ((java_cup.runtime.Symbol)CUP$SlpCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$SlpCup$stack.peek()), RESULT);
            }
          return CUP$SlpCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // field_meth_list ::= field_meth_list field_meth 
            {
              ASTfmList RESULT =null;
		int fmlleft = ((java_cup.runtime.Symbol)CUP$SlpCup$stack.elementAt(CUP$SlpCup$top-1)).left;
		int fmlright = ((java_cup.runtime.Symbol)CUP$SlpCup$stack.elementAt(CUP$SlpCup$top-1)).right;
		ASTfmList fml = (ASTfmList)((java_cup.runtime.Symbol) CUP$SlpCup$stack.elementAt(CUP$SlpCup$top-1)).value;
		int fmleft = ((java_cup.runtime.Symbol)CUP$SlpCup$stack.peek()).left;
		int fmright = ((java_cup.runtime.Symbol)CUP$SlpCup$stack.peek()).right;
		ASTNode fm = (ASTNode)((java_cup.runtime.Symbol) CUP$SlpCup$stack.peek()).value;
		 fml.addNode(fm); RESULT = fml;
		Parser.print_rule("field_meth_list-> 'field_meth_list field_meth'"); 
              CUP$SlpCup$result = parser.getSymbolFactory().newSymbol("field_meth_list",5, ((java_cup.runtime.Symbol)CUP$SlpCup$stack.elementAt(CUP$SlpCup$top-1)), ((java_cup.runtime.Symbol)CUP$SlpCup$stack.peek()), RESULT);
            }
          return CUP$SlpCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // field_meth_list ::= 
            {
              ASTfmList RESULT =null;
		 RESULT = new ASTfmList();
		Parser.print_rule("field_meth_list-> 'field_meth'"); 
              CUP$SlpCup$result = parser.getSymbolFactory().newSymbol("field_meth_list",5, ((java_cup.runtime.Symbol)CUP$SlpCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$SlpCup$stack.peek()), RESULT);
            }
          return CUP$SlpCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // extend ::= EXTENDS CLASS_ID 
            {
              ASTExtend RESULT =null;
		int c1left = ((java_cup.runtime.Symbol)CUP$SlpCup$stack.peek()).left;
		int c1right = ((java_cup.runtime.Symbol)CUP$SlpCup$stack.peek()).right;
		String c1 = (String)((java_cup.runtime.Symbol) CUP$SlpCup$stack.peek()).value;
		 RESULT = new ASTExtend(c1);
		Parser.print_rule("extend-> 'extends c1' for c1=" + c1); 
              CUP$SlpCup$result = parser.getSymbolFactory().newSymbol("extend",12, ((java_cup.runtime.Symbol)CUP$SlpCup$stack.elementAt(CUP$SlpCup$top-1)), ((java_cup.runtime.Symbol)CUP$SlpCup$stack.peek()), RESULT);
            }
          return CUP$SlpCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // extend ::= 
            {
              ASTExtend RESULT =null;
		 RESULT = new ASTExtend();
		Parser.print_rule("extend-> ''"); 
              CUP$SlpCup$result = parser.getSymbolFactory().newSymbol("extend",12, ((java_cup.runtime.Symbol)CUP$SlpCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$SlpCup$stack.peek()), RESULT);
            }
          return CUP$SlpCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // classDecl ::= CLASS CLASS_ID extend LCBR field_meth_list RCBR 
            {
              ASTClassDecl RESULT =null;
		int c1left = ((java_cup.runtime.Symbol)CUP$SlpCup$stack.elementAt(CUP$SlpCup$top-4)).left;
		int c1right = ((java_cup.runtime.Symbol)CUP$SlpCup$stack.elementAt(CUP$SlpCup$top-4)).right;
		String c1 = (String)((java_cup.runtime.Symbol) CUP$SlpCup$stack.elementAt(CUP$SlpCup$top-4)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$SlpCup$stack.elementAt(CUP$SlpCup$top-3)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SlpCup$stack.elementAt(CUP$SlpCup$top-3)).right;
		ASTExtend e1 = (ASTExtend)((java_cup.runtime.Symbol) CUP$SlpCup$stack.elementAt(CUP$SlpCup$top-3)).value;
		int fmlleft = ((java_cup.runtime.Symbol)CUP$SlpCup$stack.elementAt(CUP$SlpCup$top-1)).left;
		int fmlright = ((java_cup.runtime.Symbol)CUP$SlpCup$stack.elementAt(CUP$SlpCup$top-1)).right;
		ASTfmList fml = (ASTfmList)((java_cup.runtime.Symbol) CUP$SlpCup$stack.elementAt(CUP$SlpCup$top-1)).value;
		 RESULT = new ASTClassDecl(c1, e1, fml);
		Parser.print_rule("classDecl_list-> 'class c1 e1 {fields_and_methods}' for c1=" + c1 + " and e1=" + e1); 
              CUP$SlpCup$result = parser.getSymbolFactory().newSymbol("classDecl",10, ((java_cup.runtime.Symbol)CUP$SlpCup$stack.elementAt(CUP$SlpCup$top-5)), ((java_cup.runtime.Symbol)CUP$SlpCup$stack.peek()), RESULT);
            }
          return CUP$SlpCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // classDecl_list ::= 
            {
              ASTClassList RESULT =null;
		  RESULT = new ASTClassList();
		Parser.print_rule("classDecl_list-> 'empty'"); 
              CUP$SlpCup$result = parser.getSymbolFactory().newSymbol("classDecl_list",6, ((java_cup.runtime.Symbol)CUP$SlpCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$SlpCup$stack.peek()), RESULT);
            }
          return CUP$SlpCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // classDecl_list ::= classDecl_list classDecl 
            {
              ASTClassList RESULT =null;
		int cl1left = ((java_cup.runtime.Symbol)CUP$SlpCup$stack.elementAt(CUP$SlpCup$top-1)).left;
		int cl1right = ((java_cup.runtime.Symbol)CUP$SlpCup$stack.elementAt(CUP$SlpCup$top-1)).right;
		ASTClassList cl1 = (ASTClassList)((java_cup.runtime.Symbol) CUP$SlpCup$stack.elementAt(CUP$SlpCup$top-1)).value;
		int c1left = ((java_cup.runtime.Symbol)CUP$SlpCup$stack.peek()).left;
		int c1right = ((java_cup.runtime.Symbol)CUP$SlpCup$stack.peek()).right;
		ASTClassDecl c1 = (ASTClassDecl)((java_cup.runtime.Symbol) CUP$SlpCup$stack.peek()).value;
		 cl1.addNode(c1); 
		RESULT = cl1;
		Parser.print_rule("classDecl_list-> 'cl1 c1' for cl1=" + cl1 + " and c1=" + c1); 
              CUP$SlpCup$result = parser.getSymbolFactory().newSymbol("classDecl_list",6, ((java_cup.runtime.Symbol)CUP$SlpCup$stack.elementAt(CUP$SlpCup$top-1)), ((java_cup.runtime.Symbol)CUP$SlpCup$stack.peek()), RESULT);
            }
          return CUP$SlpCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= program EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$SlpCup$stack.elementAt(CUP$SlpCup$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$SlpCup$stack.elementAt(CUP$SlpCup$top-1)).right;
		ASTRoot start_val = (ASTRoot)((java_cup.runtime.Symbol) CUP$SlpCup$stack.elementAt(CUP$SlpCup$top-1)).value;
		RESULT = start_val;
              CUP$SlpCup$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$SlpCup$stack.elementAt(CUP$SlpCup$top-1)), ((java_cup.runtime.Symbol)CUP$SlpCup$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$SlpCup$parser.done_parsing();
          return CUP$SlpCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // program ::= classDecl_list 
            {
              ASTRoot RESULT =null;
		int c1left = ((java_cup.runtime.Symbol)CUP$SlpCup$stack.peek()).left;
		int c1right = ((java_cup.runtime.Symbol)CUP$SlpCup$stack.peek()).right;
		ASTClassList c1 = (ASTClassList)((java_cup.runtime.Symbol) CUP$SlpCup$stack.peek()).value;
		 RESULT = new ASTRoot("program", c1);
		Parser.print_rule("program-> 'classDecl_list'"); 
              CUP$SlpCup$result = parser.getSymbolFactory().newSymbol("program",9, ((java_cup.runtime.Symbol)CUP$SlpCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$SlpCup$stack.peek()), RESULT);
            }
          return CUP$SlpCup$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

